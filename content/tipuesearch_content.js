var tipuesearch = {"pages": [{'title': 'About', 'text': '這裡是國立虎尾科技大學機械設計工程系大二的電腦輔助設計實習課程網頁. \n 何謂電腦輔助(機械)設計實習? \n 電腦其實只擅長兩件事, 能夠高速計算, 並且儲存各階段計算所得到的結果. \n 輔助指從旁支撐協助, 藉以提升主體功能. \n 設計是一種安排, 而且應該是竭盡全力, 希望達到盡善盡美的一種安排. \n 機械是一種器物, 而且是各零組件精巧配置運行下, 可以達成特定任務, 發揮設計功能的一種器物. \n 實習包括實驗與練習, 實驗是實際體驗, 而練習則是透過重複操作進行學習. \n 所以該如定義電腦輔助設計實習? \n 課程設計理念 \n \n 電腦輔助設計牽涉如何利用計算機系統相關技術, 以協助產品設計的多元探索, 快速創建, 便捷修改, 合理分析和最佳化, 其目的在建構出精確的新產品數位模型. \n 產品設計的創建牽涉利用參數式繪圖套件建立 3D 零件與組立, 而設計修改可以採人工或程式方法進行, 至於本課程所牽涉的設計分析僅止於將機電系統輸入  CoppeliaSim  進行  Kinematic  與  Dynamic  分析模擬. \n 從 3D 零組件的創建並轉進  CoppeliaSim , 若能採程式方法配合參數化尺寸與組態修改, 並且將資料改版過程採用 Git ( Github ) 或  Fossil SCM  進行分散式版次管理, 或者更近一步設法搭建網際系統以提高設計效能, 將可在分組團隊中採取最佳化同步設計. \n 課程使用工具 \n CAD2020 將在  https://kaggle.com ,  https://colab.research.google.com  以及可攜程式系統上編寫與  Flask  網際程式, 目的是利用  Onshape ,  NX 12,  Solidworks  2017 與  AutoDesk Inventor  2019 設計機電資整合系統所需的零組件後, 可結合  Flutter  手機程式與網際  Python Remote API  程式控制  CoppeliaSim  環境中的 虛擬系統 . \n 以下是 CAD2020 課程進行流程: \n W1 學員填寫基本資料 \n W1 告知將利用  Gitter  與  Discourse  進行課程議題討論 \n https://gitter.im/mdecourse/cad2020 \xa0 \n https://forum.eng.nfu.edu.tw \xa0 \n W1 就電腦軟硬體與網路環境的使用進行介紹 \n W2 學員建立  Github ,  Gitlab,   Heroku ,  Onshape  與  Authorea  帳號 \n Ｗ2 學員利用 Github Pages 與 CMSiMDE 建立個人網頁 \n W2 學員學習如何利用 Git 與 Github 維護個人網頁 \n Ｗ3 統整 W1 與 W2 教材內容至各學員個人網頁 \n Ｗ3 完成亂數分組,\xa0 每班分成四組 \n W4 - W6 Flask on Heroku 與 CoppeliaSim Remote API 程式編寫 \n W7-W9 建立  https://github.com/mdecourse/vrep-api-python  所需零組件 \n Ｗ10 - W14 分組電腦輔助設計專案 \n Ｗ15 - W18 分組總結報告 \n 電腦輔助設計室與協同設計室行事曆 \n 全頁檢視 \n', 'tags': '', 'url': 'About.html'}, {'title': '評分', 'text': '電腦輔助設計實習自評與互評表單  (每週課程結束後, 請登入 @gm 後填寫) \n \n (上圖取自\xa0 https://link.springer.com/book/10.1007/978-3-642-03446-6 ) \n 本課程的評分標準: \n \n 從未遲到者得 10% \n 從未缺席且從未無正當理由離席超過 15 分鐘者得 20% \n 從未缺交各週作業且從未抄襲他人作業且從未不當引用網路資料者得 30% \n 作業與報告內容充實, 每一項課程內容都拍攝具參考價值之教學影片者得 20% \n 完成具體且創新之課程內容改進項目, 並能積極協助組員解決各種難題者得 10% \n 個人之倉儲內容, 網頁, 網誌與簡報內容均令人嘆為觀止者得 10% \n \n 根據上述課程評分標準, 由組員之自評成績決定課程期中成績, 視為本課程之學員期望成績, 期中考後, 則依據各週之組員自評成績, 組員互評成績與教師評分成績, 按照下列流程計算學員之學期成績. \n \'\'\'\n根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績\n\'\'\'\n# diff 函式傳回兩輸入分數的絕對差值 \ndef diff(分數1, 分數2):\n    return abs(分數1 - 分數2)\n     \n# getHigh函式傳回兩分數中較高者\ndef getHigh(分數1, 分數2):\n    if  分數1 > 分數2:\n        return 分數1\n    else:\n        return 分數2\n\n# getLow 函式傳回兩分數中較低者\ndef getLow(分數1, 分數2):\n    if  分數1 < 分數2:\n        return 分數1\n    else:\n        return 分數2\n\n# 分組評分函式取自評與教師評分比較, 若差距大於 5 分取其低者\n# 否則依自評 40%, 教師 60% 計算\ndef 分組評分(自評分數, 教師評分):\n    return getLow(自評分數, 教師評分)\n    if diff(自評分數, 教師評分) > 5:\n        return getLow(自評分數, 教師評分)\n    else:\n        return int(自評分數*0.4 + 教師評分*0.6)\n\n# 全班比分函式取互評與分組評分比較, 若差距小於 5 分取其高者\n# 否則依互評得分 40%, 分組評分 60% 計算     \ndef 全班比分(互評得分, 分組評分):\n    if diff(互評得分, 分組評分) < 5:\n        學員成績 = getHigh(互評得分, 分組評分)\n    else:\n        學員成績 = int(互評得分*0.4 + 分組評分*0.6)\n    return 學員成績\n\n# 學員之學期成績依照上述分組評分與全班比分函式計算 \ndef 學員成績(自評分數, 互評得分, 教師評分):\n    學員課程成績 = 全班比分(互評得分, 分組評分(自評分數, 教師評分))\n    return 學員課程成績\n\n# 利用迴圈從 50 起每次增量 5 分, 分別列出各評分組合下的成績計算結果    \nfor i in range(10):\n    self_score = 50 + i*5\n    for j in range(10):\n        peer_score = 50 + j*5\n        for k in range(10):\n            teacher_score = 50 + k*5\n            print(self_score, peer_score, teacher_score, "=", 學員成績(self_score, peer_score, teacher_score))', 'tags': '', 'url': '評分.html'}, {'title': '討論區', 'text': 'https://gitter.im/mdecourse/cad2020 \xa0(與電腦輔助設計實習相關) \n https://forum.eng.nfu.edu.tw \xa0(其他議題討論)', 'tags': '', 'url': '討論區.html'}, {'title': '分組', 'text': '修課人員名單: \n 四技二甲電腦輔助設計實習: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0788 \n 四技二乙電腦輔助設計實習: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0801 \n', 'tags': '', 'url': '分組.html'}, {'title': 'Python', 'text': 'https://swcarpentry.github.io/python-second-language/ \n https://vpython.org/ \xa0 \n https://github.com/IKMLab/course_material \xa0', 'tags': '', 'url': 'Python.html'}, {'title': 'Open Tech', 'text': 'CMU Open Learning Initiative:\xa0 https://oli.cmu.edu/?s=pathway+open+and+free&post_type=product \n https://community.oli.cmu.edu/jcourse/webui/guest/join.do?section=electvehicle \xa0 (50703199 At mde) \n \n P-Tech:\xa0 https://www.ptech.org/open-p-tech/ \xa0 \n The FAIR Guiding Principles for Scientiric data management and stewardship.pdf', 'tags': '', 'url': 'Open Tech.html'}, {'title': 'Mechatronics', 'text': 'https://oli.cmu.edu/courses/mechatronics-technology-nsc-stem-pathways-copy/ \n http://cmra.rec.ri.cmu.edu/products/cortex_video_trainer/', 'tags': '', 'url': 'Mechatronics.html'}, {'title': 'PICsimlab', 'text': 'https://lcgamboa.github.io/ \n https://github.com/mdecourse/picsimlab \n', 'tags': '', 'url': 'PICsimlab.html'}, {'title': 'UnoArduSim', 'text': 'https://www.sites.google.com/site/unoardusim/services', 'tags': '', 'url': 'UnoArduSim.html'}, {'title': 'Cyber Tech', 'text': 'https://oli.cmu.edu/courses/cyber-technology-nsc-stem-pathways-open-free/ \xa0 \n', 'tags': '', 'url': 'Cyber Tech.html'}, {'title': 'E-vehicle', 'text': 'https://oli.cmu.edu/courses/electric-vehicle-technology-nsc-stem-pathways-open-free/ \xa0 \n', 'tags': '', 'url': 'E-vehicle.html'}, {'title': 'Composite Tech', 'text': 'https://oli.cmu.edu/courses/composites-technology-nsc-stem-pathways-open-free/ \xa0', 'tags': '', 'url': 'Composite Tech.html'}, {'title': 'Topics', 'text': '課程助教: \n 40723150 (lead), 40723110, 40723115, 40723138, 40723148 \n 40723145 (lead), 40723102, 40723103, 40723153, 40723245 \n 40723212 (lead), 40723216, 40723223, 40723246 \n 負責事項: \n 電腦輔助設計室電腦第三磁區系統維護 \n 每週四 19:00 - 21:00 在電腦輔助設計室為操作實習與助教協助回答問題時間', 'tags': '', 'url': 'Topics.html'}, {'title': 'Video', 'text': '本課程所有學員都必須熟悉利用下列工具製作電腦操作過程錄影並協同進行線上直播與錄影: \n ShareX \n 課程進行中的所有操作細節都會利用  ShareX  進行錄影, 並將 mp4 影片檔案放入  cad2020 課程線上教學影片區 , 各學員可以直接利用電腦或手機觀看. \n Google Meet \n https://meet.google.com/ \xa0允許 @gm 用戶進行線上串流對談, 分享電腦操作畫面, 文字留言以及串流影音錄影等功能, 各分組學員必須熟悉如何操作並且在分組後每單數週, 利用  Google Meet  進行線上會議討論與錄影存證. \n Youtube  +\xa0 OBS \n OBS  支援多元的電腦影音來源組合功能, 配合  Youtube  的線上串流直播與錄影功能, 可以讓不參與會議者以文字留言板進行互動或在線上觀看直播.\xa0 各分組學員必須熟悉如何操作並且在分組後每雙數週, 利用  Youtube  +  OBS  進行線上會議討論與錄影存證. \n Wink \n Wink  是一套用來製作電腦操作流程說明用的工具, 之前 2.0 版本的輸出檔案為 Flash swf 檔案格式, 但因各瀏覽器將在  2020 年底停止支援 Flash 播放功能 , 因此目前作者正在測試能夠透過  FFMPEG  輸出 mp4 檔案的版本, 待其正式推出後將可用於課程教學中.', 'tags': '', 'url': 'Video.html'}, {'title': 'W1Video', 'text': '1aw1cad_intro.mp4 \n ShareX  操作設定介紹 \n 上課操作影片擷取方式說明 \n 說明每位學員都必須建立 cad2020 課程倉儲與網站 \n 第一版的可攜環境只有 Python 3.8 尚未安裝模組 \n 利用 pip list 檢查所安裝的模組 \n 2aw1cad_portablegit.mp4 \n 說明仍使用  Portablegit  進行 git 操作 \n 說明如何利用 git config 設定身分與代理主機 \n 3aw1cad_grouping.mp4 \n 說明如何在  github  建立 cad2020 倉儲 \n 說明如何在 cad2020 倉儲中以  cmsimde  建立動態與靜態網站 \n 利用 線上亂數分組程式 完成 2a 分組 \n 4bw1cad_cmsimde_intro.mp4 \n 說明如何在 \xa0 github \xa0 建立 cad2020 倉儲 \n 說明\xa0 cmsimde \xa0所需的模組為 flask flask_cors lxml bs4 markdown pelican leo \n 說明如何在\xa0 cmsimde \xa0動態系統中編輯網頁, 如何轉為靜態網頁 \n 說明 git config 有無 --global 的差別 \n 說明零組件完成後可以透過  CoppeliaSim  進行模擬', 'tags': '', 'url': 'W1Video.html'}, {'title': 'W2Video', 'text': '5bw2cad_cmsime_upstream.mp4 \n 說明如何在  Github  建立空倉儲後, 利用  git remote add  與  git push -u  將近端倉儲與遠端倉儲進行綁定 \n 說明如何利用  git init  啟動空倉儲 \n 說明  git add  用法 \n 說明  git log  用法 \n 說明  echo  回應指令用法 \n 說明  git submodule add  用法 \n 說明  git remote add  可以透過  https 或 ssh  協定與遠端伺服器進行網路資料交換 \n 說明  git status  用法 \n 說明  git commit  用法 \n 說明  git push  用法 \n 說明將靜態網頁資料送往  Github Pages  後必須配合倉儲中分支設定, 才會進入靜態網頁轉檔 \n', 'tags': '', 'url': 'W2Video.html'}, {'title': 'W4Video', 'text': '6aw4_nx_and_mde.mp4 \n 回顧電腦的網路設定 \n 說明如何下載 NX12 \n 要求每一組要至少使用兩種不同的 MCAD 系統繪製 HW1 的所有零件 \n 說明利用參數繪圖軟體完成零組件後, 希望可以透過將零件倉儲透過程式進行改變 \n 本週起每週上課之前要完成各組學員的自評與互評 \n 說明將利用  Wink3  製作電腦操作 mp4 影片 \n 說明本課程的高端機械電腦輔助設計套件將採用 2017 年的  NX12 \n 要求各學員自行觀看與  NX12  相關的影片 \n 說明  Topology Optimization Design  流程需要透過程式進行數學最佳化演算 \n 提及\xa0 The A-Design Invention Machine.pdf \xa0的設計理論, 將使得未來產品的開發更依賴電腦執行最佳化自動設計 \n 7aw4_nx_mechanical_design.mp4 \n 說明在電腦輔助設計室可以直接透過隨身系統的 start_nx12.bat 設定啟動\xa0 NX12 \n 說明在系上網路可以透過  http://a.kmol.info:88 \xa0下載可攜環境的第一與第二版 \n 所謂可攜環境的 -1 版使用 Python 3.6.8 與 V-rep 3.6.1 版主要目的是配合\xa0 NX12 \xa0的 NXOpen Python 二次開發, 並配合未來可能需要在舊硬體上的 Ubuntu 20.04 上執行 V-rep 3.6.1 \n 說明\xa0 NX12 \xa0主要功能介紹 \n 說明電腦輔助設計流程必須在零組件的繪圖之外, 透過電腦運算, 分散式版次有效管理或網際系統的整合對產品設計加值 \n 說明在不同 MCAD 套件進行零組件設計時, 必須要關注該以哪種格式轉檔, 且是否能夠完整轉檔 \n 說明  NX12 \xa0同時提供參數設計與直接建模等兩種主要方式 \n 說明何謂  digital mockup \n 要求各組員針對\xa0 NX_for_Mechanical_Design.pdf \xa0整理出重點與心得 \n 8aw4_wink_intro.mp4 \n 介紹\xa0 Wink3 \xa0基本用法 \n Wink3 \xa0與 Zoomit 放大顯示工具合用時必須注意要在 Ctrl + 1 按下後直接取畫面, 若在滑鼠左鍵點擊後再取畫面, 可能會造成\xa0 Wink3 \xa0操作異常 \n', 'tags': '', 'url': 'W4Video.html'}, {'title': 'W5Video', 'text': '9aw5_github_account_and_nx_license.mp4 \n 說明如何利用程式方法修改  W3 頁面 中的學員連結資料 \n 電腦輔助設計流程必須思考如何以程式因應設計流程中的改變 \n Python 程式提供  bs4  模組, 可以用來解讀網頁內容, 從中解讀出相關資料 \n 後續將利用零件參數的排列組合變化產生零件, 並設法利用 API 程式取出與零件有關的資料 \n 繪製零件之前必須要在操作影片拍攝之前, 列出所使用的套件與 kernel 版本 \n 展示  Solvespace  程式的編譯過程 \n 10aw5_python_correct_2a_w3_grouping_data.mp4 \n 說明如何利用程式方法修改\xa0 W3 頁面 中的學員連結資料 \n 11aw5_nxopen_journal_bring_up_HW2.mp4 \n 透過 Menu -> Preferences -> User Interface -> Tools -> Journal \n NX 可以透過  NXOpen  進行 API 程式開發 \n Solidworks 可以透過  PySW  執行 API 程式 \n 12bw5_kaggle_and_nx_onlin_offline_python.mp4 \n 說明如何利用程式方法修改\xa0 W3 頁面 中的學員連結資料 \n 說明如何透過 Menu -> Preferences -> User Interface -> Tools -> Journal 使用 Python 錄製 \n http://nxjournaling.com/ \xa0參考 ( NXOpen Python ) \n 展示利用 run_journal.exe 執行  cube_offline.py \n NX 可以透過 Menu -> Help -> About NX -> System Information 看到版本為 12.0.2.9 Parasolid 為 30.1 版 \n 13bw5_fix_wrong_cmsimde_submodule.mp4 \n 說明如何修正 cmsimde 子模組無法連結的問題, 將有問題的子模組刪除後, 重新建立 cmsimde 子模組 \n 參考:\xa0 https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule \xa0 \n To remove a submodule you need to: \n \n Delete the relevant section from the .gitmodules file. \n Stage the .gitmodules changes: \xa0 \xa0 git add .gitmodules \n Delete the relevant section from .git/config. \n Remove the submodule files from the working tree and index: \xa0 \xa0 git rm --cached path_to_submodule (no trailing slash). \n Remove the submodule\'s .git directory: \xa0 \xa0 rm -rf .git/modules/path_to_submodule \n Commit the changes: \xa0 \xa0 git commit -m "Removed submodule <name>" \n Delete the now untracked submodule files: \xa0 \xa0 rm -rf path_to_submodule \n \n', 'tags': '', 'url': 'W5Video.html'}, {'title': 'W6Video', 'text': '14aw6_solidworks_31_python_api_demo.mp4 \n 說明如何利用 Python 3.8 透過 API 變更 練習1 中的第 31 個零件的特定尺寸. \n 15aw6_SWapi_generated_html.mp4 \n 利用 Python 以 API 迴圈建立多個零件後, 同時產品展示零件下載, 零件等角視圖與體積的表列 html 檔案. \n 16aw6_tcc_setup.mp4 \n 說明如何在可攜程式環境中加入 Tiny C ANSI compiler 執行環境 \n https://bellard.org/tcc/ \xa0 \n https://github.com/TinyCC/tinycc \xa0 \n', 'tags': '', 'url': 'W6Video.html'}, {'title': 'W7Video', 'text': '17aw7_engineer_engineering.mp4 \n 說明 engineer 的兩個基本特性: 1) 具創造性, 2) 能夠聰明, 精巧, 準確地進行工作. \n 工程產品開發流程包含: requirements development, conceptual design, detailed design 與 production 等四個階段, 而機械設計工程師則主要從事 detailed design 相關工作. \n 19aw7_how_to_self_compile_tinyC.mp4 \n 說明只要從  http://download.savannah.gnu.org/releases/tinycc/  下載 tcc 原始碼, 並且在 win32 目錄下從  http://mde.tw/cad2020/downloads/tcc/win32/tools/tiny_impdef.c  與\xa0 http://mde.tw/cad2020/downloads/tcc/win32/tools/tiny_libmaker.c  取下兩個 .c 並且放到 win32/tools 目錄下. (或從  https://github.com/LuaDist/tcc/tree/master/win32/tools  下載), 並且手動執行 \n tiny_impdef libtcc.dll -o libtcc.def \n 後將 libtcc.def 放入 libtcc 目錄中, 就可以順利以舊版的 Tiny C 編譯出新版的 Tiny C. \n 20aw8_tinyc_dll_pyslvs_altair_sympy_intro.mp4 \n 說明如何利用 ANSI C 製作可以讓 Python 呼叫的動態程式庫, 分別接受整數輸入或浮點輸入版本 \n 說明進行平面機構設計分析時, 可以利用  https://pyslvs.com \xa0中所提供的工具:\xa0 https://github.com/KmolYuan/Pyslvs-UI \xa0 \n 也可以透過 Sympy 模組解符號式或數值分析題目. \n 介紹\xa0 https://altairuniversity.com/free-altair-student-edition/, \xa0可以透過學校配發的 @gm 帳號申請一年免費套件使用權限.', 'tags': '', 'url': 'W7Video.html'}, {'title': 'W1', 'text': 'Notice:\xa0 \n 四設二乙將在  2020-09-25 (週五)  \n 下午4:20 – 下午7:10\xa0 補 10/2 中秋節連假課程時段 \n W1 學員登入學校配發的 @gm 郵件帳號後, \xa0 填寫基本資料 \n W1 告知將利用 \xa0 Gitter \xa0 進行課程議題討論 (其餘各種問題可以至 \xa0 discourse \xa0 討論) \n W1 回想一下與電腦輔助設計室有關的電腦軟硬體架構配置, 以及如何在純 IPv6 環境中設定網路. \n 可以參考大一的課程內容:\xa0 http://mde.tw/cp2020/content/W2.html \n W1 準備在個人的電腦, 筆電或電腦輔助設計室中的電腦 (每班按照學號使用固定電腦, 若電腦故障則必須在一週內負責告知助教, 並將電腦第三磁區複製回原始狀態, 若電腦硬體故障則需回報給助教設法請廠商進行維護, 期間則至使用最後一列備用電腦) 製作合用的可攜程式系統. \n NX 高端電腦輔助機械設計套件 \n 登入 @gm 帳號,  下載 NX12 可攜版 \xa0(949MB) \n NX 12.0.2 官方手冊  https://docs.plm.automation.siemens.com/tdoc/nx/12.0.2/nx_help \n NX 12.0.2 系統自帶的 Python 版本為  3.6.1 , 或許可以相容  3.6.8 \n NXOpen for Python  參考1 ,  參考2 \n Solidworks 中端電腦輔助機械設計套件 \n 登入 @gm 帳號,  下載 SolidWorks 2017 SP2 安裝光碟 \xa0(12GB) \n Solidworks basics.pdf \n SolidWorks_Tutorial08_BearingPuller_English_08_LR.pdf \n https://pypi.org/project/pySW/ \n https://github.com/thunderbirdtr/SWPyMacros \n https://github.com/mdecourse/sw2014 \xa0 \n AutoDesk Inventor 與 Fusion 360 中端電腦輔助機械設計套件 \n 以下連結必須在校園網路、使用學校代理主機或  vpn  模式下才可下載 \n AutoDesk PDSU \xa0(Product Design Suite Ultimate edition) 包含: Autodesk Inventor Professional AutoCAD Mechanical AutoCAD Electrical AutoCAD Navisworks Simulate AutoCAD Raster Design Autodesk Recap Autodesk Vault Basic Autodesk Fusion 360 Navisworks Manage AutoDesk 安裝教學.pdf \n 登入 @gm 帳號,  下載\xa02017_Book_LearnAutodeskInventor2018Basic.pdf \n http://jtdz-solenoids.com/stackoverflow_/questions/47443621/extracting-parameters-from-autodesk-inventor-with-python \n Onshape 雲端電腦輔助機械設計系統 \n 至  https://onshape.com \xa0以 @gm 電子郵箱註冊教育帳號 \n https://cad.onshape.com/help/Content/Primer/onshape_primer.htm \n Solvespace 開源參數式電腦輔助設計套件 \n 至\xa0 https://github.com/solvespace/solvespace \xa0下載原始碼, 自行利用\xa0 https://www.msys2.org/ \xa0編譯使用 \n http://solvespace.com/tutorial.pl \n http://www.farwire.net/SolveSpace-LearningGuide.htm \n 問題: \n 1. 從 NX 至開源的 Solvespace, 每一套各有不同的用法與特色, 為什麼需要從高端套件到開源套件下載這麼多資料? \n 2. 電腦輔助設計實習應該要練習零組件繪圖還是利用電腦執行機電產品設計開發? 還是要深入了解各電腦輔助設計套件的共同原理, 設法從中創造價值? \n 3. 各分組能夠利用 NX, Solidworks, Inventor, Onshape 與 Solvespace 建立下列的所有零件檔案, 並以表格列出各零件的體積嗎? \n Solidworks 零件繪圖練習1.pdf \n Solidworks 零件繪圖練習2.pdf \n 4. 在產品開發過程, 初步的零組件設計完成後, 需不需要進行工程分析? 假如已知\xa0 https://github.com/Range-Software/range3 \xa0與\xa0 https://github.com/NGSolve/ngsolve \xa0等兩套開源 CAE, 我們可以設法分別編譯使用, 並嘗試將分析結果與 Ansys 及 Comsol 進行比較?', 'tags': '', 'url': 'W1.html'}, {'title': 'HW1', 'text': '請各分組分別利用 NX, Solidworks, Inventor, Onshape 與 Solvespace 建立下列的所有零件檔案, 並以表格列出各零件的體積. \n Solidworks 零件繪圖練習1.pdf \n Solidworks 零件繪圖練習2.pdf \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW1_SW', 'text': '1. 先確定圖檔與下載連結在動態網頁所需的 html 格式 \n \n 上述圖檔的 html 為: \n <img src="./../downloads/sw_macro/html/31_1.jpg" alt="" width="300" > \n 而下載零件的 anchor 為: \n block.SLDPRT \n <a href="./../downloads/sw_macro/block.SLDPRT">block.SLDPRT</a> \n 2. 因此 Python API 程式在依據使用者尺寸輸入與重複迴圈繪圖次數後, 將可依據上述 img 與 anchor 格式, 產生以下所需的動態網頁內容. 更棒的結果是零件繪圖程式結束後, 會自動定位 config/content.htm 中的 HW1_API 頁面, 自動將零件下載, 等角視圖檔, 以及各零件的體積資料等插入既定的位置. \n 3. 上述所完成的 html 表格如下: \n \n 以下零件採 SolidWorks 2017 SP 2.0 教育版繪製: \n \n \n \n Number \n Part \n Jpg \n Width \n Volume \n \n \n 1 \n 31_1.SLDPRT \n \n 2.0 mm \n 49289.528 mm*3 \n \n \n 2 \n 31_2.SLDPRT \n \n 4.0 mm \n 50222.861 mm*3 \n \n \n 3 \n 31_3.SLDPRT \n \n 6.0 mm \n 51156.194 mm*3 \n \n \n 4 \n 31_4.SLDPRT \n \n 8.0 mm \n 52089.528 mm*3 \n \n \n 5 \n 31_5.SLDPRT \n \n 10.0 mm \n 53022.861 mm*3 \n \n \n 6 \n 31_6.SLDPRT \n \n 12.0 mm \n 53956.194 mm*3 \n \n \n 7 \n 31_7.SLDPRT \n \n 14.0 mm \n 54889.528 mm*3 \n \n \n 8 \n 31_8.SLDPRT \n \n 16.0 mm \n 55822.861 mm*3 \n \n \n 9 \n 31_9.SLDPRT \n \n 18.0 mm \n 56756.194 mm*3 \n \n \n 10 \n 31_10.SLDPRT \n \n 20.0 mm \n 57689.528 mm*3 \n \n \n \n 產生零件與上列 html 的程式碼: \n import pythoncom\nimport win32com.client\nimport win32api\nimport os\n\nos.system("taskkill /IM sldworks.exe /F")\nos.system("taskkill /IM sldworks_fs.exe /F")\n\n\'\'\'\nAbout DispatchEx and Dispatch Methods:\nhttps://stackoverflow.com/questions/18648933/using-pywin32-what-is-the-difference-between-dispatch-and-dispatchex\nSource code:\nhttp://pywin32.hg.sourceforge.net/hgweb/pywin32/pywin32/file/0db1b26904d5/com/win32com/src/PyIDispatch.cpp\nDoc:\nhttps://docs.microsoft.com/en-us/dotnet/standard/native-interop/com-callable-wrapper\n\nIDispatch: Provides a mechanism for late binding to type.\nIDispatchEx:\n    Interface supplied by the runtime if the class implements IExpando. The IDispatchEx interface is an extension of the IDispatch interface that, unlike IDispatch, enables enumeration, addition, deletion, and case-sensitive calling of members.\n\'\'\'\napp = win32com.client.DispatchEx("SldWorks.Application")\n#app=win32com.client.Dispatch("SldWorks.Application")\n\n# define var to convert variables\ndef var(type, value):\n    # type needs to be string\n    # use builtin getattr() to return pythoncom.type\n    pytype = getattr(pythoncom, type)\n    return win32com.client.VARIANT(pytype, value)\n\n# for two-type variable convert\n# is there any three-type variant?\ndef var2(type1, type2, value):\n    pytype1 = getattr(pythoncom, type1)\n    pytype2 = getattr(pythoncom, type2)\n    return win32com.client.VARIANT(pytype1|pytype2, value)\n    \ndef part(app, fileName, sketchName, dimName, newDim, newFileName):\n    arg1 = var("VT_I4", 1)\n    # GetMassProperties( ((3, 1), (16387, 3)))\n    #arg1 = win32com.client.VARIANT(pythoncom.VT_I4, 1)\n    arg2 = var("VT_I4", -1)\n\n    # 0. need the most important obj app\n    #app=win32com.client.Dispatch("SldWorks.Application")\n    # use relative directory to open part\n    # 1. open part file, need the path of the part file (need the file name)\n    #doc=app.OpenDoc(".\\\\block2.SLDPRT", 1)\n    doc=app.OpenDoc(os.path.join(os.getcwd(), fileName), 1)\n    # save part as binary stl\n    # can we save part as ASCII stl as well?\n    #doc.SaveAs2(".\\\\block2.stl", 0, True, False)\n    # the parameter VARIANT list for SelectByID2\n    # can we automate the VARIANT conversion?\n    # 2. use the sketch to select the SKETCH (need the sketch name)\n    #SelectByID2((8, 1), (8, 1), (5, 1), (5, 1), (5, 1), (11, 1), (3, 1), (9, 1), (3, 1))\n    #arg3 = var("VT_BSTR", "Sketch1")\n    arg3 = var("VT_BSTR", sketchName)\n    arg4 = var("VT_BSTR", "SKETCH")\n    arg5 = var("VT_R8", 0)\n    arg6 = var("VT_R8", 0)\n    arg7 = var("VT_R8", 0)\n    arg8 = var("VT_BOOL", False)\n    arg9 = var("VT_I4", 0)\n    arg10 = var("VT_DISPATCH", None)\n    arg11 = var("VT_I4", 0)\n    # select Sketch1 first\n    status = doc.Extension.SelectByID2(arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)\n    # select DIMENSION to to modify\n    # 3. use the dimension name @ sketch name @ part file name\n    # to select the DIMENSION to modify\n    #arg12 = var("VT_BSTR", "Width@Sketch1@block2.SLDPRT")\n    arg12 = var("VT_BSTR", dimName+"@"+sketchName+"@"+fileName)\n    arg13 = var("VT_BSTR", "DIMENSION")\n    status = doc.Extension.SelectByID2(arg12, arg13, arg5, arg6, arg7, arg8, arg9, arg10, arg11)\n    #Dim swDimension As SldWorks.Dimension\n    # 4. to bring out the parameter to modify, need the dimension name and \n    # sketch name\n    #swDimension = doc.Parameter("Width@Sketch1")\n    swDimension = doc.Parameter(dimName+"@"+sketchName)\n    # the dimension unit is in meter\n    # 5. need the new value of the parameter\n    #swDimension.SystemValue = 0.50\n    swDimension.SystemValue = newDim\n    # 6. do the final house keeping process, clear selection and rebuild the part\n    sel = doc.ClearSelection2 \n    sel = True\n    status = doc.EditRebuild()\n    arg31 = var("VT_I4", 1)\n    arg32 = var2("VT_I4", "VT_BYREF", 3)\n    # 7. get the volume of the new part\n    volumn = doc.Extension.GetMassProperties(arg31, arg32)\n    #print(volumn[3]*1E9, "mm*3")\n    # 8. save the new part (need the new part file name)\n    #doc.SaveAs2(".\\\\block3.SLDPRT", 0, True, False)\n    doc.SaveAs2(os.path.join(os.getcwd(), "html/" + newFileName + ".SLDPRT"), 0, True, False)\n    # save jpg of part\n    doc.EditRebuild()\n    arg33 = var("VT_BSTR", "Isometric")\n    doc.ShowNamedView(arg33)\n    doc.ViewZoomtofit2()\n    doc.SaveAs3(os.path.join(os.getcwd(), "html/" + newFileName + ".jpg"), 0, 0)\n    # mm*3\n    return str(round(volumn[3]*1E9, 3)) + " mm*3"\nhtml = "以下零件採 SolidWorks 2017 SP 2.0 教育版繪製:<br /><br /><table border=\'1\' cellpadding=\'5\'><tr><th>Number</th><th>Part</th><th>Jpg</th><th>Width</th><th>Volume</th></tr>"\nindex = 0\nfor i in range(1, 11):\n    dim = i*0.002\n    blockVolume = part(app, "31_step.SLDPRT", "Sketch1", "Width", dim, "31_" + str(i))\n    print("31_" + str(i) + ".SLDPRT, dim= " + str(round(dim, 3)) +", volume= " + blockVolume)\n    index += 1\n    newFileName = "31_" + str(i)\n    html += \'\'\'<tr>\n    <td>\'\'\' + str(index) +\'\'\'</td>\n    <td><a href="./../downloads/sw_macro/html/\'\'\' + newFileName + \'\'\'.SLDPRT">\'\'\' + newFileName + \'\'\'.SLDPRT</a></td>\n    <td><img width="300" src="./../downloads/sw_macro/html/\'\'\' + newFileName + \'\'\'.jpg"></img></td>\n    <td>\'\'\' + str(round(dim*1000, 2)) + \'\'\' mm </td>\n    <td>\'\'\' + blockVolume + \'\'\'</td>\n    </tr>\n    \'\'\'\nhtml += "</table>"\n# save part.html\nwith open("./html/part.html", "w", encoding="utf-8") as f:\n     f.write(html)\n     \n\'\'\'\nfor assembly\n        swModelDocExt.SelectByID2("", "EDGE", -0.439825991092107, 7.07350481263802E-02, 0.40982045578545, true, 2, null, 0);\n        swModelDocExt.SelectByID2("", "EDGE", -0.219003008311574, 0.073085842475507, 0.549481823985616, true, 4, null, 0);\n        swModelDocExt.SelectByID2("Part-3@AssemModel", "COMPONENT", 0, 0, 0, true, 1, null, 0);\n        swFeature = (Feature)swFeatureManager.FeatureLinearPattern2(3, 40 / 1000, 0, 0, false, true, "NULL", "NULL", false);\n        assemblyModel.ClearSelection2(true);\n\'\'\'\nos.system("taskkill /IM sldworks.exe /F")\nos.system("taskkill /IM sldworks_fs.exe /F")\n# now the SolidWorks is embedding\n \n', 'tags': '', 'url': 'HW1_SW.html'}, {'title': 'HW1_INV', 'text': '針對 HW1 使用 AutoDesk Inventor 2019 教育版繪零件圖者, 可以利用下列 Python 程式修改零件參數, 取零件影像圖並計算零件體積: \n import pythoncom\nimport win32com.client\nimport win32api\nimport os\n\n# Open Inventor\ninvApp = win32com.client.Dispatch("Inventor.Application")\n#print(invApp)\ninvApp.Visible = True\n\ninvApp.SilentOperation = True\n\n# Set location of assembly\npartName = \'C:/tmp/Part1.ipt\'\n\n# Open the model\noDoc = invApp.Documents.Open(partName)\n# use UserParameters to access the user parameters\n#oUserParams = oDoc.ComponentDefinition.Parameters.UserParameters\n#oNewParam = oUserParams.AddByExpression("x", "9", "mm")\n# use Item() to get the model parameter named "d0"\nd0 = oDoc.ComponentDefinition.Parameters.Item("d0")\n# Expression can add dimension unit\n#d0.Expression = "2 cm"\n# Value use the default system unit: cm\nd0.Value = 2\n# use Update() method to get the new part volume\noDoc.Update()\n# fit the active view and save the part image\ninvApp.ActiveView.Fit(True)\noDoc.SaveAs("C:/tmp/Part1.png", True)\nprint(oDoc.ComponentDefinition.MassProperties.Volume)\n#invApp.Quit() \n', 'tags': '', 'url': 'HW1_INV.html'}, {'title': 'W2', 'text': '所有學員各自利用 @gm 電子郵箱建立 \xa0 Github , \xa0 Gitlab, \xa0 Heroku , \xa0 Onshape \xa0 與 \xa0 Authorea \xa0 帳號 \n Github: 各學員在學號帳號下建立 cad2020 倉儲. \n Gitlab: 各學員將 Github 倉儲 cad2020 同步至 Gitlab 同名倉儲. \n Heroku: 用來部署 cad2020 倉儲中的動態程式或靜態網頁的雲端應用程式服務系統. \n Authorea: 用來建立各組的協同期末專案報告 pdf 檔案. \n 所有學員利用  Github Pages  與  CMSiMDE  建立個人網頁, 倉儲名稱為 cad2020 \n 所有學員學習如何利用  Git  與  Github  維護個人網頁 (以 SSH push 版本請參考 這裡 ) \n NX12 二次開發 \n nxopen_getting_started_v12.pdf \n 由於 NX12.0.2 中的 NXOpen for Python 綁定 3.6.1 版本, 因此為了進行 NX12.0.2 的網際二次程式開發, 特別製作一個可攜的 Python 3.6.8 版本系統, 可以登入 @gm 帳號後,  下載\xa0fall2020_v-1.7z . 或在系上網段直接從  http://a.kmol.info:88 \xa0中下載. \n 各組則由負責建立 Ubuntu 20.04 虛擬主機的組員登入 @gm 帳號後,  下載 Ub2004.vdi .\xa0 或在系上網段直接從\xa0 http://a.kmol.info:88 \xa0中下載.', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '統整 W1 與 W2 教材內容至各學員個人網頁 \n 完成 亂數分組 ,\xa0 每班分成五組 \n 2a: \n group 1:  Repository:  40523148  | Site:  40523148  Repository:  40723136  | Site:  40723136  Repository:  40723151  | Site:  40723151  Repository:  40732331  | Site:  40732331  Repository:  40823114  | Site:  40823114  Repository:  40823116  | Site:  40823116  Repository:  40823119  | Site:  40823119  Repository:  40823121  | Site:  40823121  Repository:  40823124  | Site:  40823124  Repository:  40823128  | Site:  40823128  Repository:  40823129  | Site:  40823129  Repository:  40823145  | Site:  40823145  Repository:  40823150  | Site:  40823150  Repository:  40823154  | Site:  40823154    ==============================   group 2:  Repository:  40723153  | Site:  40723153  Repository:  40723225  | Site:  40723225  Repository:  40823109  | Site:  40823109  Repository:  40823110  | Site:  40823110  Repository:  40823111  | Site:  40823111  Repository:  40823117  | Site:  40823117  Repository:  40823118  | Site:  40823118  Repository:  40823123  | Site:  40823123  Repository:  40823126  | Site:  40823126  Repository:  40823139  | Site:  40823139  Repository:  40823144  | Site:  40823144  Repository:  40823153  | Site:  40823153  Repository:  40871106  | Site:  40871106    ==============================   group 3:  Repository:  40823101  | Site:  40823101  Repository:  40823103  | Site:  40823103  Repository:  40823104  | Site:  40823104  Repository:  40823107  | Site:  40823107  Repository:  40823122  | Site:  40823122  Repository:  40823125  | Site:  40823125  Repository:  40823127  | Site:  40823127  Repository:  40823131  | Site:  40823131  Repository:  40823132  | Site:  40823132  Repository:  40823136  | Site:  40823136  Repository:  40823149  | Site:  40823149  Repository:  40823152  | Site:  40823152    ==============================   group 4:  Repository:  40823102  | Site:  40823102  Repository:  40823106  | Site:  40823106  Repository:  40823108  | Site:  40823108  Repository:  40823112  | Site:  40823112  Repository:  40823115  | Site:  40823115  Repository:  40823120  | Site:  40823120  Repository:  40823135  | Site:  40823135  Repository:  40823140  | Site:  40823140  Repository:  40823142  | Site:  40823142  Repository:  40823146  | Site:  40823146  Repository:  40823148  | Site:  40823148  Repository:  40823151  | Site:  40823151 \n 2a unordered grouping list: \n [[40523148, 40723136, 40723151, 40732331, 40823114, 40823116, 40823119, 40823121, 40823124, 40823128, 40823129, 40823145, 40823150, 40823154], [40723153, 40723225, 40823109, 40823110, 40823111, 40823117, 40823118, 40823123, 40823126, 40823139, 40823144, 40823153, 40871106], [40823101, 40823103, 40823104, 40823107, 40823122, 40823125, 40823127, 40823131, 40823132, 40823136, 40823149, 40823152], [40823102, 40823106, 40823108, 40823112, 40823115, 40823120, 40823135, 40823140, 40823142, 40823146, 40823148, 40823151]] \n 2b \n group 1  Repository:  40723224  | Site:  40723224 Repository:  40823204  | Site:  40823204 Repository:  40823212  | Site:  40823212 Repository:  40823215  | Site:  40823215 Repository:  40823219  | Site:  40823219 Repository:  40823225  | Site:  40823225 Repository:  40823226  | Site:  40823226 Repository:  40823234  | Site:  40823234 Repository:  40823250  | Site:  40823250 Repository:  40823251  | Site:  40823251 Repository:  40832244  | Site:  40832244  ============================== group 2  Repository:  40823211  | Site:  40823211 Repository:  40823213  | Site:  40823213 Repository:  40823214  | Site:  40823214 Repository:  40823222  | Site:  40823222 Repository:  40823229  | Site:  40823229 Repository:  40823230  | Site:  40823230 Repository:  40823231  | Site:  40823231 Repository:  40823236  | Site:  40823236 Repository:  40823242  | Site:  40823242 Repository:  40823245  | Site:  40823245  ============================== group 3  Repository:  40723135  | Site:  40723135 Repository:  40723215  | Site:  40723215 Repository:  40823201  | Site:  40823201 Repository:  40823203  | Site:  40823203 Repository:  40823205  | Site:  40823205 Repository:  40823206  | Site:  40823206 Repository:  40823210  | Site:  40823210 Repository:  40823217  | Site:  40823217 Repository:  40823227  | Site:  40823227 Repository:  40823248  | Site:  40823248  ============================== group 4  Repository:  40823207  | Site:  40823207 Repository:  40823208  | Site:  40823208 Repository:  40823216  | Site:  40823216 Repository:  40823218  | Site:  40823218 Repository:  40823220  | Site:  40823220 Repository:  40823224  | Site:  40823224 Repository:  40823228  | Site:  40823228 Repository:  40823238  | Site:  40823238 Repository:  40823244  | Site:  40823244 Repository:  40823246  | Site:  40823246  ============================== group 5  Repository:  40823202  | Site:  40823202 Repository:  40823221  | Site:  40823221 Repository:  40823223  | Site:  40823223 Repository:  40823232  | Site:  40823232 Repository:  40823233  | Site:  40823233 Repository:  40823235  | Site:  40823235 Repository:  40823237  | Site:  40823237 Repository:  40823239  | Site:  40823239 Repository:  40823241  | Site:  40823241 Repository:  40823247  | Site:  40823247 \n 2b unordered list: \n [[40723224, 40823204, 40823212, 40823215, 40823219, 40823225, 40823226, 40823234, 40823250, 40823251, 40832244], [40823211, 40823213, 40823214, 40823222, 40823229, 40823230, 40823231, 40823236, 40823242, 40823245], [40723135, 40723215, 40823201, 40823203, 40823205, 40823206, 40823210, 40823217, 40823227, 40823248], [40823207, 40823208, 40823216, 40823218, 40823220, 40823224, 40823228, 40823238, 40823244, 40823246], [40823202, 40823221, 40823223, 40823232, 40823233, 40823235, 40823237, 40823239, 40823241, 40823247]] \n 有關作業一: \n 工程師利用電腦輔助設計方法在進行新產品開發的過程, 若能透過參數繪圖軟體的特性, 利用產品設計參數的組合進行最佳化設計, 將可有效提升設計效益, 但該如何透過產品的設計參數來調整控制 2D 工程圖與 3D 零組件圖檔? \n 研究一下, 何謂  API ? \n NX12, Solidworks 2017, Inventor 2020, Onshape 與 Solvespace 有沒有 API? \n NX:\xa0 \n https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api/ \xa0 \n SolidWorks:\xa0 \n http://help.solidworks.com/2017/english/SolidWorks/sldworks/c_solidworks_api.htm \xa0 \n Inventor:\xa0 \n https://www.autodesk.com/autodesk-university/class/Introduction-Inventor-API-Automation-Where-Should-You-Start-2016 \xa0 \n Onshape: \n https://forum.onshape.com/discussion/4030/where-can-i-find-the-apis-and-api-documentation-for-onshape-how-much-functionality-the-apis-cover \xa0 \n Solvespace: \n https://pyslvs-ui.readthedocs.io/en/stable/python-solvespace-api/ \xa0 \n \n HW1 (Due W9 各班上課之前): \n 請各分組分別利用 NX, Solidworks, Inventor, Onshape 與 Solvespace 建立下列的所有零件檔案, 並以表格列出各零件的體積. \n Solidworks 零件繪圖練習1.pdf \n Solidworks 零件繪圖練習2.pdf \n 圖書館電子書選讀: \n Genetic Algorithms for Applied CAD Problems: \n https://link.springer.com/book/10.1007/978-3-540-85281-0 \xa0(2009) \n Introduction to Genetic Algorithms: \n https://link.springer.com/book/10.1007/978-3-540-73190-0 \xa0(2008) \n 處理程式: \n https://www.kaggle.com/mdecourse/cad2020-w5 \xa0(利用 學號與 Github 帳號對應資料 修改產生正倔的網頁資料) \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4-W6', 'text': '個人網站參考:  https://sookrajcreations.weebly.com/ \xa0 \n 2018_Robot_Design_for_Everyone.pdf \n Kinematic analysis and synthesis of four-bar mechanisms for straight line coupler curves.pdf \n 利用 \xa0 Wink3 \xa0 建立電腦操作流程導引影片. 下載 \xa0 Wink3.7z \n NX_for_Mechanical_Design.pdf \n 2013 Web based Customized Design.pdf \n 2014_Automatic Offline Program Generation for a Robotic Spot Welding Assembly Line.pdf \n 2019_Custom Design and Analysis of Modular High Voltage DC Generator.pdf \xa0( 來源 ) \n 2020_Design of a KBE system for automatic weld path definition in CAD.pdf \n 登入 @gm 擷取  NX Tutorial Video \n \n 說明之後的版本都將稱為 NX 不會有 NX13 \n 之後每個月都會有更新, 每半年會有一個大更新, 類似 Windows 10 \n 當採特定 Schema 大更新之後所建立的零組件將無法用先前的舊版本開啟 \n 零組件可以透過 nx12\\NXBIN\\part_security.exe 設定密碼保護 \n part_security -encrypt -p=test safe.txt safe.psf \n 將 safe.txt 以 test 密碼保護存為 safe.psf \n part_security -genkeys -public=NX_public.key -private=NX_private.key \n 建立公鑰與私鑰 \n part_security -recover -private=NX_private.key -part=model1.part \n 利用新版 NX 開啟舊零組件後, 可以使用 renew feature 重建特徵 \n \n N12 功能介紹: \n Variable offset face \n Combine \n Flattening and Forming \n Latitce enhancements \n Delete child features enhancements \n Analyze pocket/Blend pocket enhancements \n Sheet metal Tab/Flange enhancements \n Layout/Animation Designer \n \n \n https://github.com/mdecourse/Siemens-NXOpen-API \xa0 \n \n https://github.com/williamhunter/topy \xa0 \n https://github.com/ISosnovik/top \xa0 \n https://github.com/zfergus/topopt \xa0 \n \n https://github.com/mdecourse/Siemens-NXOpen-API \xa0 \n \n Synthesis and Analysis of a Novel Linkage Mechanism with the Helical Motion of the End-Effector.pdf \n The A-Design Invention Machine.pdf \n https://github.com/mdecourse/BondGraphTools \n https://bondgraphtools.readthedocs.io/ \xa0 \n Bond Graph Modeling \n Metamodeling.pdf \n 2017_BOND_GRAPH_ANALYSIS_IN_ROBUST_ENGINEERING_DESIGN.pdf \n 2014_A Bond Graph Approach for Modelling Systems of Rigid Bodies in Spatial Motion.pdf \n https://openmodelica.org/doc/OpenModelicaUsersGuide/latest/ompython.html \xa0 \n https://github.com/pymoca/pymoca \xa0 \n Computational Physics - problem solving with computer.pdf \n Computational Physics with Python.pdf \n Flask  on  Heroku  與  CoppeliaSim Remote API  程式編寫 \n 製作可攜 CoppeliaSim for Windows 10 (登入 @gm 下載  CoppeliaSim 4.1.0 rev1.7z ) \n 假如要在 Ubuntu 20.04 實體伺服器上執行, 則必須使用  V-REP_PRO_EDU_3.6.1.7z \xa0(Windows 10 64 位元版),  V-REP_PRO_EDU_V3_6_1_Ubuntu18_04.tar.xz \xa0(for @gm users only) \n Introduction to V-rep.pdf \n Linux 教學影片 \n 登入 @gm \xa0 下載 Heroku cli 可攜.7z , 解開壓縮檔案後, 在 start.bat 中將 Heroku bin 設定指令搜尋路徑, 重新啟動後, 以 heroku version 確定指令可以正常執行後, heroku login 成功後, 登入帳號密碼會存入 home/_netrc 中. 之後便可直接透過 heroku cli 指令直接對遠端主機下命令. \n web_vrep2.7z  (Flask 網際程式控制 CoppeliaSim 中的二輪車) \n https://www.coppeliarobotics.com/helpFiles/ \xa0 \n https://www.twblogs.net/u/5d3f8d75bd9eee51fbf9311d \xa0 \n https://github.com/mdecourse/good_robot \xa0 \n https://github.com/mdecourse/BaxterHello_V-REP \xa0 \n https://github.com/mdecourse/v-rep-robotics \xa0 \n https://github.com/mdecourse/DDPG_Grasping \xa0 \n https://github.com/mdecourse/vrep-raven2 \xa0 \n https://github.com/mdecourse/arm-suction-sim \xa0 \n https://github.com/mdecourse/mc907-mobile-robotics \xa0 \n https://github.com/mdecourse/vrep-example \xa0(C++) \n FreeCAD:\xa0 \n 登入 @gm 後 下載 FreeCAD_0.18.4_portable.7z \n https://github.com/FreeCAD/FreeCAD \xa0 \n 參考:  https://github.com/mdecourse/wcms2018/issues/9 \xa0 \n 2020_Interactive Programming for Parametric CAD.pdf \n https://gist.github.com/EvoYash \xa0 \n https://github.com/mdecourse/Retr3d \xa0(需要更新為 Python3 與 FreeCAD 0.18.4 相容) \n 其他參考程式 \n 開啟 Freecad, File -> New 開啟一個空檔案, 之後以下拉式功能表 View -> Panels -> Python Console 開啟程式輸入視窗, 然後在 Python Console 區貼入下列程式碼後按下 Enter, 可以在工作視窗中建立一個實體模型, 同時按下滑鼠中鍵與右鍵可以旋轉視窗畫面: \n Desk: \n import FreeCAD, Part, PartGui\nfrom FreeCAD import Base\n\nac_doc = FreeCAD.ActiveDocument\n\ndef make_box(name,length,width,height,base_vector,base_rotation):\n    ac_doc = FreeCAD.ActiveDocument\n    ac_doc.addObject("Part::Box",name)\n    getattr(ac_doc, name).Length = length\n    getattr(ac_doc, name).Width = width\n    getattr(ac_doc, name).Height= height\n    getattr(ac_doc, name).Placement=Base.Placement(Base.Vector(base_vector[0],base_vector[1],base_vector[2]),Base.Rotation(base_rotation[0],base_rotation[1],base_rotation[2],base_rotation[3]))\n\ndef make_cylinder(name,radius,height,base_vector,base_rotation):\n    ac_doc = FreeCAD.ActiveDocument\n    ac_doc.addObject("Part::Cylinder",name)\n    getattr(ac_doc, name).Radius = radius\n    getattr(ac_doc, name).Height= height\n    getattr(ac_doc, name).Placement=Base.Placement(Base.Vector(base_vector[0],base_vector[1],base_vector[2]),Base.Rotation(base_rotation[0],base_rotation[1],base_rotation[2],base_rotation[3]))\n\nmake_box("Cube",100,100,10,[0,0,1],[0.00,0.00,0.00,1.00])\n\nmake_cylinder("cylinder",2,100,[3,3,-90],[0.00,0.00,0.00,1.00])\n\nmake_cylinder("cylinder1",2,100,[97,97,-90],[0.00,0.00,0.00,1.00])\n\nmake_cylinder("cylinder2",2,100,[3,97,-90],[0.00,0.00,0.00,1.00])\n\nmake_cylinder("cylinder3",2,100,[97,3,-90],[0.00,0.00,0.00,1.00])\n\nFreeCAD.Gui.SendMsgToActiveView("ViewFit")\nFreeCAD.Gui.activeDocument().activeView().viewAxometric() \n Helix Gear: \n import Part, FreeCAD, PartGui, FreeCADGui\nimport InvoluteGearFeature\nfrom fcgear import involute, fcgear\nfrom math import pi, tan\n\nnumTeeth = 20\nheight = 20 #mm\nmodule = 3.5 #mm\npressureAngle = 25.0 # degrees\nhelixAngle = 25 # degrees\nhighPrecision = False\n\n# First, draw an involute gear profile\nw = fcgear.FCWireBuilder()\ninvolute.CreateExternalGear(w, module, numTeeth, pressureAngle, highPrecision)\ninvBaseWire = Part.Wire([o.toShape() for o in w.wire])\n\n# Make a helix to serve as the rotation vector\nhelix = App.ActiveDocument.addObject("Part::Helix", "Helix")\nhelix.Pitch = numTeeth * pi * module / tan(helixAngle * pi / 180.0)\nhelix.Height = height\nhelix.LocalCoord = 1 # 0 = "right handed", 1 = "Left Handed"\nhelix.Style = 1\n\n# Path for axis of gear\ncentralEdge = Part.makeLine((0, 0, 0), (0, 0, height))\ncentralWire = Part.Wire([centralEdge])\n\n# Extrude+twist to make helix\nshell = Part.BRepOffsetAPI.MakePipeShell(centralWire)\nshell.setAuxiliarySpine(helix.Shape, True, False)\nshell.add(invBaseWire)\nshell.build()\nshell.makeSolid()\n\n# Add gear to document\nrotorObject = App.ActiveDocument.addObject("Part::Feature", "Helical Spur Gear")\nrotorObject.Shape = shell.shape()\n\n# Cleanup - TODO: Don\'t call addObject to make the helix in the first place\nApp.ActiveDocument.removeObject(helix.Name) \n', 'tags': '', 'url': 'W4-W6.html'}, {'title': 'Engineering', 'text': 'Engineer  \n Engineers, as practitioners of engineering, are professionals who invent, design, analyze, build and test machines, complex systems, structures, gadgets and materials to fulfill functional objectives and requirements while considering the limitations imposed by practicality, regulation, safety and cost. \n The word engineer (Latin ingeniator) is derived from the Latin words ingeniare ("to create, generate, contrive, devise") and ingenium ("cleverness"). The foundational qualifications of an engineer typically include a four-year bachelor\'s degree in an engineering discipline, or in some jurisdictions, a master\'s degree in an engineering discipline plus four to six years of peer-reviewed professional practice (culminating in a project report or thesis) and passage of engineering board examinations. The work of engineers forms the link between scientific discoveries and their subsequent applications to human and business needs and quality of life. \n The following paragraph cited from "An Introduction to Mechanical Engineering, Third Edition Jonathan Wickert and Kemper E. Lewis", pp. 4-5, 2013 \n The word "engineering" derives from the Latin root ingeniere, meaning to design or to devise, which also forms the basis of the word "ingenious." \n Those meanings are quite appropriate summaries of the traits of a good engineer. \n At the most fundamental level, engineers apply their knowledge of mathematics, science, and materials—as well as their skills in communications and business—to develop new and better technologies. \n Rather than experiment solely through trial and error, engineers are educated to use mathematics, scientific principles, and computer simulations as tools to create faster, more accurate, and more economical designs. \n In that sense, the work of an engineer differs from that of a scientist, who would normally emphasize the discovery of physical laws rather than apply those phenomena to develop new products. Engineering is essentially a bridge between scientific discovery and product applications. \n Engineering does not exist for the sake of furthering or applying mathematics, science, and computation by themselves. Rather, engineering is a driver of social and economic growth and an integral part of the business cycle. With that perspective, the U.S. Department of Labor summarizes the engineering profession as follows: \n Engineers apply the theories and principles of science and mathematics to research and develop economical solutions to technical problems. Their work is the link between perceived social needs and commercial applications. \n Engineers design products, machinery to build those products, plants in which those products are made, and the systems that ensure the quality of the products and the efficiency of the workforce and manufacturing process. \n Engineers design, plan, and supervise the construction of buildings, highways, and transit systems. They develop and implement improved ways to extract, process, and use raw materials, such as petroleum and natural gas. They develop new materials that both improve the performance of products and take advantage of advances in technology. \n They harness the power of the sun, the Earth, atoms, and electricity for use in supplying the Nation’s power needs, and create millions of products using power. They analyze the impact of the products they develop or the systems they design on the environment and on people using them. Engineering knowledge is applied to improving many things, including the quality of healthcare, the safety of food products, and the operation of financial systems. \n \n cited from Figure 2.4 - Flowchart of the prototypical mechanical design process ( "An Introduction to Mechanical Engineering, Third Edition Jonathan Wickert and Kemper E. Lewis", pp. 41, 2013) \n Terminology: \n Entrepreneurship \n Requirements Development  ( Requirements DevelopmentRequirements Development Steps.pdf ) \n \n ( System Engineering Process Overiew ) \n Recognize needs \n Recognizing the Need for Information ( source ) Education requires the ability to adapt, problem solve, and think critically about challenges that arise in your classes and career. An educated person can recognize an opportunity to learn and make the most of it. An important skill to acquire is the ability to acknowledge when you don’t know something and decide what to do about it. In other words, it’s valuable to approach an assignment by asking, \xa0\xa0\xa0 “What do I already know about this?” \xa0\xa0\xa0 “What do I want to know?” \xa0\xa0\xa0 “How do I find the information I need?” Beyond that, you’ll be able to ask, \xa0\xa0\xa0 “Where will I find the best information to fit my needs?” \xa0\xa0\xa0 “How will I know it when I see it?” \xa0\xa0\xa0 “What do I do with it once I have it?” All of these questions together are a part of a concept called “Information Literacy,” which you’ll learn about, practice, and apply as you work through these six modules. In this first module, you’ll learn how to recognize the need for information and how to plan for a successful inquiry. Understanding these concepts will prepare you to approach later modules – about finding and using information – with a clear sense of purpose. \n Identify problems \n Define requirements \n Conceptual Design \n Generate innovative concepts \n Brainstorming \n The 5W+H methods (What, Why, When, Who, Where + How) \n Reverse thinking \n Using analogies \n Social Listening \n Role playing \n Mind mapping \n Concept generating \n TRIZ  (Teoriya Resheniya Izobretatelskikh Zadatch, Theory of Inventive Problem Solving) \n Select best concepts \n Detailed Design \n Prduct layout :\xa0A product layout is where the equipment, tools, and machines are located according to how a product is made. \n Material selection \n System simulation \n Prototype and tesing \n Design documentation \n Production \n Type of Manufacturing \n Production volume \n Supplier selection \n Intro_to_engineering.pdf \n Kinematics_ kinetics_dynamics_inertia.pdf \n Intro_to_mechanics.pdf \n engineering_mechanics.pdf \n Intro_to_kinematics_and_dynamics.pdf \n Engineering (工程) \n involves the design and analysis of machines \n Engineering (工程): 牽涉機器的設計與分析 \n Machine (機器) \n deal with the conversion of energy from one source to another using the basic principles of science \n Machine (機器):\xa0 牽涉運用科學基本原理將能量從源頭轉化為另一種(作用) \n Mechanics (力學) \n \n a branch of physical science that deals with energy and forces and their effect on bodies\xa0(Merriam-Webster Dictionary) \n      Mechanics(力學):  物理學的一個分支, 牽涉(研究)能量及作用力對物體所造成的影響 \n contains three major subbranches: kinematics, statics, and kinetics \n Mechanics (力學): 包括三個主要分支- 運動學, 靜力學與動理學 \n Kinematics (運動學) \n deals with the study of relative motion \n Kinematics(運動學):\xa0 涉及相對運動的研究 \n a branch of dynamics that deals with aspects of motion apart from considerations of mass and force\xa0(Merriam-Webster Dictionary) \n Kinematics (運動學): 動力學的一個分支, 涉及運動有關的探討,  但並不涉及質量與力 \n Statics (靜力學) \n Statics(靜力學):\xa0 study of forces and moments apart from motion \n Statics (靜力學):\xa0 研究力, 力矩與運動(之間的關係) \n Kinetics (動理學) \n Kinetics (動理學):\xa0 deals with the result of forces and moments on bodies \n Kinetics (動理學):\xa0 研究力與力矩對物體造成的結果 \n a branch of science that deals with the effects of forces upon the motions of material bodies or with changes in a physical or chemical system (Merriam-Webster Dictionary) \n Kinetics(動理學):\xa0 科學的一個分支, 涉及力對物質運動以及物理或化學系統變化所造成的影響 \n Dynamics (動力學) = Kinematics (運動學) + Kinetics (動理學) \n Dynamics(動力學):\xa0 deals with the study of motion caused by forces and torque \n Dynamics(動力學):\xa0 研究力與扭矩所造成的運動 \n a branch of mechanics\xa0 that deals with forces and their relation primarily to the motion but sometimes also to the equilibrium\xa0 of bodies\xa0(Merriam-Webster Dictionary) \n Dynamics(動力學):  力學的一個分支, 主要處理力及其與運動的關係, 有時並涉及物體的平衡 \n Mechanism design (機構設計) \n the desired motion is known and the task is to determine the type of mechanism along with the required forces and torques to produce the desired motion \n 已知所需的運動, (設計)任務是確定機構的類型以及所需的力和扭矩得以產生所需的運動', 'tags': '', 'url': 'Engineering.html'}, {'title': 'W7-W9', 'text': "建立\xa0 https://github.com/mdecourse/vrep-api-python \xa0 所需零組件 \n 6-axis Robot Simulator download \xa0 (for @gm users only) \n KUKA-KR-16 SolidWorks 2017.7z  (970 MB for @gm users only) \n ANSI C, Python, V-rep, Robot and Mechanism.7z  (for @gm users only) \n 包含自我編譯 Tiny C 編譯器 \n 差分演化 運算應用 \n Symbolic Python 在平面機構應用 \n Solvespace 應用範例 \n V-rep 應用範例 \n 平面四連桿系統模擬 \n Jansen's 八連桿行走機構模擬 \n https://github.com/mdecourse/Kuka-KR-16 \xa0 \n https://wiki.freecadweb.org/Robot_6-Axis \xa0 \n https://github.com/mdecourse/scarysim \xa0 \n https://github.com/mdecourse/qt-stl \xa0 \n https://github.com/mdecourse/ADMeshGUI \xa0 \n Robotics related scenes:\xa0 https://github.com/CoppeliaRobotics/scenes \xa0 \n Slider – Crank Mechanism for demostration and experimentation.pdf \n 2016_kinematical analysis of crank slider mechanism with graphical method and by computer simulation.pdf", 'tags': '', 'url': 'W7-W9.html'}, {'title': 'HW2', 'text': '前言: \n 在這個作業中, 我們將針對 SolidWorks, Inventor 與 NX 所建立的零組件檔案加以延伸, 進入電腦輔助設計實習課程的第二個主題: 零件修改. \n 假如機械設計工程師能夠利用程式方法操控所設計的零組件, 除了可以省下許多手動修改零組件尺寸與配置的時間外, 還可在後續透過其他設計分析方法後, 由各 MCAD 套件的 API 程式介面, 自動建立所需的零組件檔案連結, BOM 表並展示各零件的物理資料. \n 1980 年代興起的 Matlab, 自 2000 之後部分 Matlab 運算已經逐步被 Python 與 C 的結合所取代, 而自 2012 年起 Julia 出現後, 未來將會有更多高階數值分析運算轉而使用 Julia + Python +R. \n 在以下的練習, 將嘗試利用 Python 透過 COM 設定零組件的變數尺寸, 並利用平面機構合成設計分析為工程分析範例, 以 Python 與 Julia 取代 Matlab 執行所需的分析運算. \n 電腦輔助設計繪圖修改練習: \n 請各班每位學員依照分組順序從\xa0 Solidworks 零件繪圖練習1.pdf \xa0各取出一個零件原始尺寸後, 自行從中選擇三個關鍵參數尺寸, 以每個尺寸在合理範圍內, 分別 -10%, -5%, +5%, +10% 的尺寸差異作為組合依據, 分別產生 64 個不同尺寸組合的零件, 以 Solidworks, Inventor 或 NX12 繪圖後, 將各組合的零件工程圖, 體積與零件圖檔列表後呈現. \n 平面機構連桿組件設計分析與繪圖: \n 還記得 工程與工程師 的兩個特質嗎? "to create" 以及 "cleverness", 也就是"聰明地創造", 因此只要是憑藉著個人的聰明才智進行創造性的工作, 就可以歸類是在進行一項工程. \n 作業一 的零組件繪圖, 主要是根據 pdf 檔案中已經設計好尺寸或組合內容建立零件, 而在作業二的第一個部分, 則是假想一個零件因為設計的需要( e.g.  客戶的要求, 或者進行設計尺寸變更評估要求), 必須多次變更零件尺寸, 因此除了直接採手動變更零件尺寸, 且以人工作業方式建立零件下載與展示網頁外, 也可以採用程式方法(或稱為電腦輔助流程) 完成此一重複性的工作( e.g.  採  SolidWorks API Python 程式 或  Inventor API Python程式 ). \n 接下來, 我們將要練習透過圖形分析法, 計算能夠達成設計目的的平面機構連桿尺寸與組合方式, 然後再進行機構連桿的零組件繪圖, 並試著採用人工或程式方法建立所需的設計展示網頁. \n 此一議題的最終目的是希望能夠利用電腦輔助設計與分析方法完成類似以下機構展示系統: \n \n 請登入 @gm 帳號,  下載平面機構作圖合成參考資料.pdf , 研讀完資料內容後將摘要整理在個人網頁後, 試著整理以下平面機構的設計繪圖, 並將結果以網頁展示. \n 通過三個特定點四連桿合成設計與零組件繪圖: \n Function Generation using Freudenstein’s Equation.pdf \n Graphical Design of Planar.pdf \xa0( source ) \n 通過五個特定點的平面機構合成設計與零組件繪圖: \n 2009_Solvingaplanarfour-barlinkagesdesignproblem.pdf \n 2005_Analytical synthesis of function generating spherical four-bar mechanism for the five precision points.pdf \n 以特定方位通過十個特定點的單自由度平面機構設計與零組件繪圖: \n 2020_Exact synthesis and input-output analysis of 1-dof planar linkages for visiting 10 poses.pdf \xa0(for @gm users only) \n 2019_Multi-Pose Interactive Linkage Design.pdf \n (p.s. 為何上面兩個 pdf 檔案, 一個可以放在倉儲中直接提供下載, 但另外一個則要登入 @gm 帳號才能下載? 原因是: 若該 pdf 檔案可以公開合法取得, 則可以放入倉儲直接提供任何人下載, 但若是從校方付費訂閱的內容取得, 則只限修課學員登入 @gm 帳號後才能下載) \n 參考資料: \n Linkage Design.pdf \n 2013_FOUR-BAR LINKAGE SYNTHESIS FOR A COMBINATION OF MOTION AND PATH-POINT GENERATION.pdf \xa0(碩士論文) \n 2009_KINEMATIC SYNTHESIS AND ANALYSIS TECHNIQUES TO IMPROVE PLANAR RIGID-BODY GUIDANCE.pdf \xa0(博士論文) \n 2019_A Machine Learning Approach to Kinematic Synthesis of Defect-Free Planar Four-Bar Linkages.pdf \n 2016_DYNAMIC ANALYSIS OF FLEXIBLE MECHANISMS WITH CLEARANCE.pdf \n 2015_Computer Aided Design of Eight-bar Linkages.pdf \xa0(博士論文) \n https://mechanicaldesign101.com/blog/ \xa0 \n 2012_NSF Workshop on 21st Century Kinematics.pdf \n 2006_textbook_intro_applied_digital_control.pdf \n 2006_WAM_UsersGuide_AE-00.pdf \xa0( https://medical.barrett.com/about-1 ) \n matlab_tutorial.pdf \xa0(for the past) vs.  Julia_tutorialpdf ,  Julia-intro2.pdf ,  Julia_numerial_computing.pdf \xa0(for now and the future)', 'tags': '', 'url': 'HW2.html'}, {'title': 'W7', 'text': '有關利用 各種數值分析方法解微分方程式的比較 . \n 準備進行電腦輔助設計分析主題練習. \n 利用 SciTE 編輯器類解譯 ANSI C 程式 \n https://bellard.org/tcc/ \xa0是一個小型的 ANSI C 解譯器, 可以與隨身系統中的 SciTE 結合, 讓工程師利用 ANSI C 程式語言進行電腦輔助設計分析. \n 進行步驟如下: \n 1. 從 Tiny C 官方網站中的  Download  連結, 可以下載\xa0 tcc-0.9.27-win64-bin.zip , 解開壓縮檔案後的目錄為 tcc, 其中包含 tcc.exe, 可以用來編譯 ANSI C 程式, 這個目錄必須放在 y:\\ 根目錄中. \n 2. 接著必須將 y:\\tcc\\ 放入隨身系統中的 path 命令搜尋路徑中, 一旦啟動後就可以直接執行 tcc.exe, 也就是 start.bat 必須修改如下: \n set path_portablegit=%Disk%:\\Portablegit\\bin;\nset path_julia=%Disk%:\\julia-1.5.2\\bin;\nset path_tcc=%Disk%:\\tcc\\;\n\npath=%Disk%:;%path_python%;%path_portablegit%;%path_julia%;%path_tcc%;%path%; \n 在上面 start.bat 的設定中, 可以發現除了 portablegit 之外, 同時增加 path_julia 與 path_tcc 兩個批次檔變數的設定, 並且分別加到 path= 的設定中. \n 完成後, 可以利用 stop.bat 關閉隨身系統後, 再使用 start.bat 重新啟動, 並在命令列中輸入 tcc, 若出現 \n Tiny C Compiler 0.9.27 - Copyright (C) 2001-2006 Fabrice Bellard\nUsage: tcc [options...] [-o outfile] [-c] infile(s)...\n       tcc [options...] -run infile [arguments...]\nGeneral options:\n  -c          compile only - generate an object file\n  -o outfile  set output filename\n  -run        run compiled source\n  -fflag      set or reset (with \'no-\' prefix) \'flag\' (see tcc -hh)\n  -Wwarning   set or reset (with \'no-\' prefix) \'warning\' (see tcc -hh)\n  -w          disable all warnings\n  -v -vv      show version, show search paths or loaded files\n  -h -hh      show this, show more help\n  -bench      show compilation statistics\n  -           use stdin pipe as infile\n  @listfile   read arguments from listfile\nPreprocessor options:\n  -Idir       add include path \'dir\'\n  -Dsym[=val] define \'sym\' with value \'val\'\n  -Usym       undefine \'sym\'\n  -E          preprocess only\nLinker options:\n  -Ldir       add library path \'dir\'\n  -llib       link with dynamic or static library \'lib\'\n  -r          generate (relocatable) object file\n  -shared     generate a shared library/dll\n  -rdynamic   export all global symbols to dynamic linker\n  -soname     set name for shared library to be used at runtime\n  -Wl,-opt[=val]  set linker option (see tcc -hh)\nDebugger options:\n  -g          generate runtime debug info\n  -b          compile with built-in memory and bounds checker (implies -g)\n  -bt N       show N callers in stack traces\nMisc. options:\n  -x[c|a|n]   specify type of the next infile\n  -nostdinc   do not use standard system include paths\n  -nostdlib   do not link with standard crt and libraries\n  -Bdir       set tcc\'s private include/library dir\n  -MD         generate dependency file for make\n  -MF file    specify dependency file name\n  -m32/64     defer to i386/x86_64 cross compiler\nTools:\n  create library  : tcc -ar [rcsv] lib.a files\n  create def file : tcc -impdef lib.dll [-v] [-o lib.def] \n 表示啟動命令搜尋路徑已經包含 y:\\tcc 目錄. \n 3. 接下來必須修改 SciTE 編輯器中的 cpp.properties, 讓 Tools -> Go 可以呼叫 tcc.exe 類解譯編輯器中副檔名為 .c 的 ANSI C 程式. \n 作法為將滑鼠指向 SciTE 下拉式功能表 Options 往下點擊 Open cpp.properties 編輯設定檔案, 並且勾選 View -> Line Number 在編輯器中顯示行號, 針對\xa0 476 行之後的設定修改如下: \n ccopts=-pedantic -Os\n#cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o\n#ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o\ncc=y:/tcc/tcc.exe -run\nccc=y:/tcc/tcc.exe -run\n\nmake.command=make\ncommand.compile.*.c=$(ccc) -std=c99\ncommand.build.*.c=$(make.command)\ncommand.build.*.h=$(make.command)\ncommand.clean.*.c=$(make.command) clean\ncommand.clean.*.h=$(make.command) clean\ncommand.go.*.c=$(cc) $(FileNameExt)\n#command.go.*.c=./$(FileName)\n# To make the Go command both compile (if needed) and execute, use this setting: \n 意即, 將原先 cc=g++ 與 ccc=gcc 改為利用 y:\\tcc\\tcc.exe -run 進行類解譯, 而且將原先必須經過編譯後以檔名執行的 command.go.*.c 設為直接利用 tcc.exe -run ex.c 的方式執行, 而 FileNameExt 就是帶有副檔名的程式名稱. \n 4. 完成上述設定後, 可以在編輯器中納入 hello.c, 並且利用 Tools -> Go 直接進行存檔並且執行. \n #include <stdio.h>\n \nint main() {\n    printf("Hello, world!\\n");\n    return 0;\n} \n 5. 接下來可以設法利用 ANSI C 練習一下  http://mde.tw/lab/content/Dart.html \xa0中的數值分析運算, 利用 Runge-Kutta 解微分方程式. 為了能讓 C 解出的數值資料可以轉為圖檔, 並且允許加入中英文標註資料, 還必須下載  gnuplot.7z  與  wqy-microhei.ttc , 其中的 gunplot 目錄與 .ttc 中文字型檔案可以放在 y:\\, 並且在 start.bat 加入 y:\\gnuplot\\bin 命令搜尋路徑, 而最新的 gnuplot 也可以從  http://www.gnuplot.info/ \xa0下載. \n 6. 完成上述所有步驟設定後, 可以執行下列 ANSI C 程式: \n /* Runge Kutta for a set of first order differential equations */\n \n#include <stdio.h>\n#include <math.h>\n \n#define N 2 /* number of first order equations */\n#define dist 0.1 /* stepsize in t*/\n#define MAX 30.0 /* max for t */\n \nFILE *output; /* internal filename */\nFILE *output1; /* internal filename */\n// 利用 pipe 呼叫 gnuplot 繪圖\nFILE *pipe;\n \nvoid runge4(double x, double y[], double step); /* Runge-Kutta function */\ndouble f(double x, double y[], int i); /* function for derivatives */\n \nvoid main(){\n \n  double t, y[N];\n  int j;\n \n  output=fopen("osc.dat", "w"); /* external filename */\n  output1=fopen("osc1.dat", "w"); /* external filename */\n \n  y[0]=1.0; /* initial position */\n  y[1]=0.0; /* initial velocity */\n \n  //fprintf(output, "0\\t%f\\n", y[0]);\n \n  for (j=1; j*dist<=MAX ;j++) /* time loop */{\n \n    t=j*dist;\n    runge4(t, y, dist);\n    fprintf(output, "%f\\t%f\\n", t, y[0]);\n    fprintf(output1, "%f\\t%f\\n", t, y[1]);\n  }\n \n  fclose(output);\n  fclose(output1);\n \n  pipe = popen("gnuplot -persist","w");\n  //fprintf(pipe,"set term png enhanced font \\"v:/fireflysung.ttf\\" 18 \\n");\n  fprintf(pipe,"set term png enhanced font \\"y:/wqy-microhei.ttc\\" 18 \\n");\n  //fprintf(pipe,"set yrange [68:70]\\n");\n  fprintf(pipe,"set output \\"test.png\\"\\n");\n  fprintf(pipe, "plot \\"osc.dat\\" title \\"位移\\" with lines, \\"osc1.dat\\" title \\"速度\\" with lines\\n");\n  fprintf(pipe,"quit\\n");\n\n  fprintf(pipe,"quit\\n");\n  pclose(pipe);\n}\n \nvoid runge4(double x, double y[], double step){\n \n  double h=step/2.0, /* the midpoint */\n  t1[N], t2[N], t3[N], /* temporary storage arrays */\n  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */\n  int i;\n \n  for (i=0;i<N;i++){\n \n    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));\n  }\n \n  for (i=0;i<N;i++){\n \n    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));\n  }\n \n  for (i=0;i<N;i++){\n \n    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));\n  }\n \n  for (i=0;i<N;i++){\n \n    k4[i]= step*f(x+step, t3, i);\n  }\n \n  for (i=0;i<N;i++){\n \n    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;\n  }\n}\n \ndouble f(double x, double y[], int i){\n \n  if (i==0)\n    x=y[1]; /* derivative of first equation */\n  if (i==1)\n    x=-y[0]-0.5*y[1];\n  return x;\n} \n 上述所解的狀態方程式: \n 質量為 1kg 物理, 以 k=1 彈簧與 b=0.5 阻尼器連接在固定牆壁, 起始拉開 1m, 速度為０ 時放開, 求放開質量後的運動模擬. \n $x(t)$ 表示質量拉開水平方向設為正向 x, 且為時間 t 的函式. \n $\\ddot{x}+x+0.5*\\dot{x}=0$ \n $x(0)=1.0$ \n $\\dot{x}(0)=0$ \n 以下利用程式定義解題: \n $x=y[0]$ \n $\\dot{x}=y[1]$ \n $\\ddot{x}=-y[0]-0.5*y[1]$ \n 起始條件: \n $x(0)=1$ \n $\\dot{x}=0$ \n \n 並產生數值運算結果: \n \n 上述相同問題採  scipy.integrate.odeint  解題: \n import numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n    \ndef massspring(X, t):\n    x = X[0]\n    y = X[1]\n    dxdt = y\n    dydt = -x - 0.5*y\n    return [dxdt, dydt]\n\n# initial condition\nX0 = [1.0, 0.0]\n\n# time points\nt = np.linspace(0, 30, 200)\n\n# solve ODE\nsol = odeint(massspring, X0, t)\n\n# plot results\nx = sol[:, 0]\ny = sol[:, 1]\n\nplt.plot(t,x, t, y)\nplt.xlabel(\'t\')\nplt.legend((\'x\', \'y\'))\nplt.show()\nplt.savefig(\'massspring.png\')\n\n# phase portrait\nplt.figure()\nplt.plot(x,y)\nplt.plot(x[0], y[0], \'ro\')\nplt.xlabel(\'x\')\nplt.ylabel(\'y\')\nplt.show()\nplt.savefig(\'massspring2.png\') \n 結果如下: \n \n \n 上述相同題目也可以  Dart 進行運算  或者使用\xa0 https://github.com/mdecourse/pydgq  程式庫解題. \n 其他與 mass-spring-damper 動態分析有關議題請參考:  http://www.sharetechnote.com/html/DE_Modeling_Example_SpringMass.html \xa0 \n 上述各步驟完成後的所有新增設定與檔案: \n cad2020_w7_tcc_gnuplot.7z \n 接下來看看能否利用 Dart, Python 或 ANSI C 進行電腦輔助機構設計與分析. \n mechanical_advantage_analysis.pdf \n 2016_High_mechanical_advantage_design_of_six-bar_Stephe.pdf \n 2018_design_simulation_mechanism.pdf \n 其他參考資料可以下載\xa0 ANSI C, Python, V-rep, Robot and Mechanism.7z \xa0 (for @gm users only) 後將 tcc 目錄放入 y:\\tmp 中, 此檔案包含從\xa0 http://download.savannah.gnu.org/releases/tinycc/ \xa0下載的 Tiny C 程式原始碼, 可以利用下列 compile.bat 批次檔案, 利用舊版的 Tiny C 編譯出新版的 Tiny C 執行檔與程式庫. \n echo Use TCC to compile TCC\n\nset /p VERSION= < VERSION\necho > config.h #define TCC_VERSION "%VERSION%"\n\n \necho Set CC=tcc\n \nset CC=tcc\nset target=-DTCC_TARGET_PE -DTCC_TARGET_X86_64\nset P=64\n \necho tools: tiny_impdef.exe, tiny_libmaker.exe\n \n%CC% %target% win32/tools/tiny_impdef.c -o tiny_impdef.exe\n%CC% %target% win32/tools/tiny_libmaker.c -o tiny_libmaker.exe\n \necho Compile libtcc.dll\n \nif not exist libtcc\\nul mkdir libtcc\n%CC% %target% -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE libtcc.c -o libtcc.dll\ntiny_impdef libtcc.dll -o libtcc/libtcc.def\n \necho Compile tcc.exe\n \n%CC% %target% tcc.c -o tcc.exe -ltcc -Llibtcc\n \necho Compile libcc1.a\n \n%CC% %target% -c lib/libtcc1.c\n%CC% %target% -c win32/lib/crt1.c\n%CC% %target% -c win32/lib/wincrt1.c\n%CC% %target% -c win32/lib/dllcrt1.c\n%CC% %target% -c win32/lib/dllmain.c\n%CC% %target% -c win32/lib/chkstk.S\n%CC% %target% -c lib/alloca86_64.S\ntiny_libmaker lib/libtcc1.a libtcc1.o alloca86_64.o crt1.o wincrt1.o dllcrt1.o dllmain.o chkstk.o \n  啟用 LaTeX equations 編輯  \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': "利用 ANSI C 進行設計分析: \n ctutor.pdf \xa0(C Tutorial) \n https://www.programiz.com/c-programming/examples/ \xa0(C 程式範例) \n http://mde.tw/cp2020/content/HW3.html \xa0(嘗試利用 Python, C 或 Dart 解題) \n C 建立動態連結程式庫, 並與 Python 結合應用: \n 以整數資料結構串接 C 與 Python: \n tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply.c -o multiply.dll \n multiply.c \n #include <stdio.h>\n \nint multiply(int, int);\n \n__declspec(dllexport) int\nmultiply(int num1, int num2)\n{\nreturn num1 * num2;\n} \n multiply.py \n import ctypes\n \nlib = ctypes.CDLL('./multiply.dll')\nresult = lib.multiply(3, 2)\nprint(result) \n 以浮點數資料結構串接 C 與 Python: \n tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply_float.c -o multiply_float.dll \n multiply_float.c \n #include <stdio.h>\n \nfloat multiply(float, float);\n \n__declspec(dllexport) float\nmultiply(float num1, float num2)\n{\nreturn num1 * num2;\n} \n multiply_float.py \n import ctypes\n\nlib = ctypes.CDLL('.\\multiply_float.dll')\n# By default functions are assumed to return the C int type. Other return types can be specified by setting the restype attribute of the function object.\nlib.multiply.restype = ctypes.c_float\nresult = lib.multiply(ctypes.c_float(3.0), ctypes.c_float(2.0))\nprint(result) \n 平面機構設計分析: \n 2017_SOLVING MULTIBODY DYNAMICS PROBLEMS USING PYTHON.pdf \n 2016_Bookmatter_FundamentalsOfMachineTheoryAnd.pdf \n Solvingaplanarfour-barlinkagesdesignproblem.pdf \n Fourbar_Lagrange_10.pdf \n A review of simple analytical methods for the kinematic synthesis of four-bar and slider-crank function generators for two and three prescribed finite positions.pdf \n https://www.moorepants.info/blog/npendulum.html\xa0 \n https://juliarobotics.org/RigidBodyDynamics.jl/dev/generated/3.%20Four-bar%20linkage/3.%20Four-bar%20linkage/ \xa0 \n Pyslvs_UI \n https://github.com/KmolYuan/Pyslvs-UI \xa0 \n http://www.pyslvs.com/ \xa0 \n \n \n six_bar_with_slider.pyslvs \xa0(Pyslvs-UI 20.10.0) \n \n \n one_slider_block_one_pin.pyslvs \xa0(Pyslvs-UI V 20.10.0) \n 2018_Optimal Synthesis of Four-Bar Linkage Path Generation throughEvolutionary Computation with a Novel ConstraintHandling Technique.pdf \n Altair Hyperworks student edition: \n https://altairuniversity.com/free-altair-student-edition/ \xa0 \n 使用 @gm 進行註冊, 並提供電腦的網路卡 MAC Address 後, 可以取得一年免費的 Hyperworks 相關的程式套件安裝許可. \n 學生版免費 Altair 套件限制:  https://altairuniversity.com/altair-student-edition-limitations/ \xa0 \n 以下為申請下載套件過程的系統回覆畫面: \n \n \n \n https://altairuniversity.com/free-altair-student-edition/", 'tags': '', 'url': 'W8.html'}, {'title': 'HW3', 'text': '請登入 @gm 帳號後下載\xa0 cad2020_hw3.7z  (100MB) \n 其中包含已經完成零組件繪圖的  KUKA KR-16 Robot : \n \n 以及由 SolidWorks 2017 教育版所轉出的前三段  ASCII STL  零件所組成的  RoKiSim \xa0機器模擬手臂: \n \n RoKiSim \xa0採用  Qt C++  結合  OpenGL  程式庫製作, 只能讀取具 color 屬性的  ASCII STL  檔案, 且零件組合系統採  Denavit-Hartenberg  表示法定義. \n 請根據\xa0 cad2020_hw3.7z \xa0中所提供的其他 SolidWorks 零件, 完成此一六軸機械手臂的 STL 零件組合, 並說明如何進行後續的  Forward  與  Inverse Kinematic  模擬. \n \n Denavit-Hartenberg Parameters \n \n A commonly used convention for selecting frames of reference in robotics applications is the Denavit and Hartenberg (D–H) convention which was introduced by  Jacques Denavit \xa0(1930-2013) and  Richard S. Hartenberg \xa0(1907-1997). In this convention, coordinate frames are attached to the joints between two links such that one transformation is associated with the joint, [Z], and the second is associated with the link [X]. The coordinate transformations along a serial robot consisting of n links form the kinematics equations of the robot, \n \n References: \n Kinematic Synthesis of Linkage \n https://en.wikipedia.org/wiki/Denavit%E2%80%93Hartenberg_parameters \xa0 \n http://www.roboanalyzer.com/ \xa0 \n https://www.parallemic.org/RoKiSim.html \xa0 \n http://www.diag.uniroma1.it/~deluca/rob1_en/material_rob1_en.html \xa0 \n https://www.iri.upc.edu/research/webprojects/cuikweb \xa0 \n  啟用 LaTeX equations 編輯  \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'W10-W14', 'text': '分組電腦輔助設計專案 \n Python Data Science 教學影片', 'tags': '', 'url': 'W10-W14.html'}, {'title': 'W15-W18', 'text': '分組總結報告 \n', 'tags': '', 'url': 'W15-W18.html'}, {'title': 'CAD', 'text': 'Computer Aided Design 電腦輔助設計牽涉如何利用 計算機系統相關技術 (computer system related technology)，以協助產品設計的創建，修改，分析和最佳化. \n Product design creation 設計創建 \n Product design modification 設計修改 \n Product design analysis 設計分析 \n Product design optimization 設計最佳化 \n \n Integration of CAD, CAE and CAM through the database (1999, Principles of CAD/CAM/CAE Systems, KunWoo Lee \n 2019_Auto-assessment tools for mechanical computer aided design education.pdf \xa0 \n https://github.com/mdecourse/trimesh \xa0', 'tags': '', 'url': 'CAD.html'}, {'title': '設計創建', 'text': '2017_Computational Abstractions for interactive design of robotic devices.pdf \n 2018_automatic design of task-specific robotic arms.pdf \n 零件繪圖 \n Advanced CAD Modeling \n https://link.springer.com/book/10.1007/978-3-030-02399-7 \n 機電傳動與避震機構設計 \n 設計創建流程中的 2D/3D 繪圖, 其建構目的為何? 只是為了溝通表達? 還是有其他目的? \n 設計內容在溝通過程需不需要進行變更修改?設計內容如何修改?由誰修改? \n 設計內容由設計者親自修改與採用計算機程式修改, 有何不同? \n 設計內容一旦修改, 舊版本需要完整保存嗎?如何保存? \n 機械產品一旦發現瑕疵, 需要進行設計變更嗎?有聽過零件 recall 嗎? \n 現在的所謂產品, 只包含機械零件嗎?需要電子感測元件?需要電機驅動元件? \n 為何會產生所謂的客戶關係管理?這跟機械設計工程師有關嗎? \n 產品的規格與品質是原創件者說了算, 還是銷售櫃台的人員說了算? \n 在甚麼情況下, 消費者得以直接面對產品的原始創建者?網路? \n https://github.com/cyberbotics/webots \xa0為何要 open source? \n 從\xa0 https://cyberbotics.com/doc/guide/ \xa0的內容創建, 你看到甚麼? \n 提示:\xa0 https://github.com/cyberbotics/webots/tree/master/docs/guide \n 何謂 Markdown? \n 為何 Webots 的技術手冊要採用 Markdown 格式編寫? \n 為何 Webots 的技術手冊要部署到 Github Pages? \n 參考 \n https://github.com/KmolYuan/Pyslvs-UI/issues/35 \n The Design Invention Machine: A Means of Automating and Investigating Conceptual Design\xa0 \n A graph grammar scheme for representing and evaluating planar mechanisms \n Automatic Design of Planar Mechanism \n https://www.jorislaarman.com/ \xa0', 'tags': '', 'url': '設計創建.html'}, {'title': 'Onshape', 'text': 'https://www.onshape.com/ \n Onshape 入門書 \n https://cad.onshape.com/help/Content/Primer/onshape_primer.htm \n Reference \n https://github.com/mdecourse/V-Rep \n https://mdekmol.github.io/cd2019a-task1-2019cda_t1_g1/ \n https://github.com/scrum-1/scrum_cadp_final/issues \n https://github.com/mdecourse/cadp2018/issues/17 \n https://405232491.gitbooks.io/gitbook_week3/content/week10.html \n', 'tags': '', 'url': 'Onshape.html'}, {'title': 'Solidworks', 'text': '下載 Solidworks 2017 安裝檔案 \xa0(只有修課人員可以下載) \n 2017 Solidworks 中文繁體說明文件 \n 2017 Solidworks 英文說明文件 \n Solidworks 教學影片 \n Solidworks API 教學影片 \n Free_SolidWorks_OBJ_Exporter.swp \n http://help.solidworks.com/2017/english/api/sldworksapiprogguide/Welcome.htm \xa0 \n http://joshuaredstone.blogspot.com/2015/02/solidworks-macros-via-python.html \xa0 \n Hack a simulation - using the solidworks api.pdf \n Making Macros in Solidworks.pdf \n https://www.codestack.net/ \xa0 \n https://www.engineersrule.com/driveworksxpress-api-learn/ \xa0 \n https://help.solidworks.com/2018/English/SolidWorks/sldworks/c_Using_Optimization_Module.htm \xa0 \n Solidworks_global variables and equation deiven design.pdf \n 2012_SolidWorks Secondary Development with Visual Basic 6 for an Automated Modular Fixture Assembly Approach.pdf \n 2014_Design and Drawing Automation Using Solid Works Application Programming Interface.pdf \n 2016_Assembly_Design_Semantic_Recognition_Using_SolidWorks.pdf \n 2018_Automatic Generation of Disassembly Sequences and Exploded Views from SolidWorks Symbolic Geometric Relationships.pdf \n 2019_Parametric System Design of Belt Conveyor Legs Based on SolidWorks.pdf \n \n \n https://www.solidsolutions.co.uk/solidworks/tutorial-videos/solidworks-patterns-equations-part-1.aspx \n https://www.solidsolutions.co.uk/solidworks/tutorial-videos/solidworks-patterns-equations-part-2.aspx \xa0 \n \n', 'tags': '', 'url': 'Solidworks.html'}, {'title': 'Inventor', 'text': 'fourbar_linkage_design_and_analysis.pdf \n AutoDesk Inventor 安裝教學 \n Learn Autodesk Inventor 2018 Basics \n https://link.springer.com/book/10.1007/978-1-4842-3225-5', 'tags': '', 'url': 'Inventor.html'}, {'title': 'NX', 'text': '請直接使用電腦輔助設計室中的 NX12 套件. \n https://docs.plm.automation.siemens.com/docs/nx/12/en_US/release_notes.pdf \xa0 \n https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html \xa0 \n NX 12 for advanced users - in a nutshell (德文版) \n https://link.springer.com/book/10.1007/978-3-658-24773-7 \n NX 12 for Engineering Design.pdf \xa0(@gm users only) \n SNAP_Getting_Started_v12.pdf \n https://www.nxjournaling.com/forum \xa0 \n NXOpen \n \n NX12 支援 Python 3.6.1 \n 將 Journal 操作錄製由內建 vb 轉為 python: \n Menu -> Preferences -> User Interface -> Tools -> Journal\xa0 \n Journal Language 選擇 Python \n Menu -> Tools -> Journal -> Record \n Menu -> Tools -> Journal -> Play \n # hello_nxopen.py\n# 導入 NXOpen\nimport NXOpen\n\ndef main():\n    # 取得目前開啟的工作階段\n    theSession = NXOpen.Session.GetSession()\n    # 建立 ListingWindow\n    listWin= theSession.ListingWindow\n    # 開啟所建立的 ListingWindow\n    listWin.Open()\n    # 在 ListingWindow 中寫入字串\n    listWin.WriteLine("Hello, NXOpen")\n\nif __name__ == "__main__":\n    main() \n Pass variable through run_journal.bat \n import sys\nimport NXOpen\nimport NXOpen.UF\n\n\ndef main(arg):\n    """Takes a string argument, and shows it in a message box."""\n    uf_session = NXOpen.UF.UFSession.GetUFSession()\n    message = "The following arguments were passed to my journal:" + arg\n    uf_session.Ui.DisplayMessage(message, 1)\nif __name__ == \'__main__\':\n\n    main(sys.argv[1])  \n NXOpen_Getting_Started_2017.pdf \n NXOpen_Getting_Started_2019.pdf \n Debug_NXOpen_Python_with_NX12_and_Eclipse_PyDev.pdf \n Web Based Customized Design.pdf \n Simcenter_NXOpen_python_ex.7z \n https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html \n http://nxjournaling.com/ \n eng-tips.com about NXOpen and Python \n run_journal 指令可以直接執行外部的 NXOpen Python Journal 程式 \n NX Open for Python batch programs are standalone Python journals that you can run from the operating system, outside of NX. batch applications in NX Open Python are Python journal files. \n Running a batch application \n An NX Open journal file can be replayed directly from a command line using the run_journal application. \n run_journal application \n The run_journal application is a standalone executable that runs NX Open Python journals in the correct environment, which allows it to pick up Python extension modules from the NX installation when they are not in the same directory as the journal file itself. \n An example of the command: \n run_journal <journal file> <arguments> \n \n \n \n \n \n 環境變數 \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\n%Disk%:\n\nset HomePath=%Disk%:\\home\nset HomeDrive=%Disk%:\\home\nset Home=%Disk%:\\home\nset USERPROFILE=%Disk%:\\home\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Disk%:\\Python36\\DLLs;%Disk%:\\Python36\\Lib;%Disk%:\\Python36\\Lib\\site-packages;C:\\nx12_portable\\data\\nx12\\NXBIN\\Python;\nset PYTHONHOME=%Disk%:\\Python36\n\nREM for putty\nset GIT_SSH=%Disk%:\\putty\\plink.exe\n\nREM 設定跟 Python 有關的命令搜尋路徑\nset path_python=%Disk%:\\Python36;%Disk%:\\Python36\\Scripts;\nREM for portable git\nset path_git=%Disk%:\\Portablegit\\bin;\n\npath=%Disk%:;%path_python%;%path_git%;\n\nREM #####################################\nREM for NX 12.0.2\nREM #####################################\n\nREM set UGII_BASE_DIR=C:\\Siemens\\NX12.0\nset UGII_BASE_DIR=C:\\nx12_portable\\data\\nx12\nset TMP_DIR=%Disk%:\\tmp\nREM set NX_CUSTOM_USER_SETTINGS_LOCATION=2\nREM set UGII_ROUTING_KIT_UNITS=metric\nset UGII_USER_PROFILE_DIR=%Disk%:\\home\nset START_DIR=%TMP_DIR%\nset UGII_TMP_DIR=%TMP_DIR%\nREM set NX_CUSTOM_VERSION=NX120 Revision C\nREM ugii_env.dat\nREM set UGII_ENV_FILE=%NX_CUSTOM_LIB%\\%NX_NUMBER%env.dat\n\nset UGII_USER_DIR=%Disk%:\\tmp\nset UGII_GROUP_DIR=%Disk%:\\tmp\nset UGII_SITE_DIR=%Disk%:\\tmp\n\nset UGII_BASE_DIR_CUSTOM=%UGII_BASE_DIR%\nset SPLM_LICENSE_SERVER=28000@192.168.56.2\nset UGII_LANG=english\nREM root directory is important for command startup\nset UGII_ROOT_DIR=%UGII_BASE_DIR%\\ugii\n\nREM for NXOpen\nset UGII_LIB_DIR=%UGII_BASE_DIR%\\ugii\nset UGII_PYTHON_HOME=%Disk%:\\Python36;C:\\nx12_portable\\data\\nx12\\NXBIN\\Python;\nset UGII_PYTHON_DLL=python36.dll\nset UGII_PYTHON_LIBRARY_DIR=%PYTHONHOME%\nset UGII_PYTHONPATH=%UGII_PYTHON_HOME%;%Disk%:\\Python36\\DLLs;%Disk%:\\Python36\\Lib;%Disk%:\\Python36\\libs;%Disk%:\\Python36\\Lib\\site-packages;%UGII_BASE_DIR%\\NXBIN\\python;\nset TCL_LIBRARY=%UGII_PYTHON_HOME%\\tcl\\tcl8.6\n\n\nset UGS_LICENSE_BUNDLE=ACD11,ACD10\nREM set NX_BUNDLES=ACD11,ACD10\nset UGII_TEMPLATE_DIR=%UGII_ROOT_DIR%\\templates\nset ugpath=%UGII_BASE_DIR%\\nxbin;%UGII_BASE_DIR%\\ugii\nREM set UGII_JAVA_HOME=C:\\Siemens\\jre1.8.0_211\nREM set UGII_JVM_LIBRARY_DIR=C:\\Siemens\\jre1.8.0_211\\bin\\server\nREM set CLASSPATH=C:\\Siemens\\jre1.8.0_211\\lib;C:\\Siemens\\NX12.0\\NXBIN\n\nREM add ugpath into path\npath=%ugpath%;%path%;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wScite\\SciTE.exe\nstart /MIN %Disk%:\\wScite\\SciTE.exe\n\nstart %UGII_BASE_DIR%\\ugii\\ugraf.exe -nx\n\nExit \n NXOpen Python Remote \n https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/NXOpen.RemoteUtilities.html \n .Net 相關範例:\xa0Y:\\NX12\\UGOPEN\\SampleNXOpenApplications\\.NET\\RemotingExample \n File -> Preferences -> User Interface -> Tools - > Journal 可以將 Journal Language 設為 Python. \n Menu -> Tools -> Journal 可以選擇錄製 Journal File. \n 利用 Menu -> Tools -> Journal 可以選擇 play 所錄製的 .py Journal File, 點選 Play 後, 選擇所要執行的 .py Journal 檔案後, 按下 Run 執行. \n 利用\xa0 NXOpen API Python 程式建立 Cube: \n # NX 12.0.2.9\n\n#\nimport math\nimport NXOpen\nimport NXOpen.Annotations\nimport NXOpen.Features\nimport NXOpen.GeometricUtilities\nimport NXOpen.Preferences\n\ndef main() : \n\n    theUI = NXOpen.UI.GetUI()\n    theMsgBox = theUI.NXMessageBox\n    theMsgBox.Show("簡要說明", NXOpen.NXMessageBox.DialogType.Information,"以下流程將建立一個簡單的長方體")\n\n    theSession  = NXOpen.Session.GetSession()\n\n    # 以下利用 ListingWindow 列出相關資訊, 可用於程式除錯\n    theLw = theSession.ListingWindow\n    # 開啟 console 將資料印出\n    theLw.Open()\n    theLw.WriteLine("theSession 變數目前為: "+str(theSession))\n\n    workPart = theSession.Parts.Work\n    # ----------------------------------------------\n    #   Menu: Insert->Sketch...\n    # ----------------------------------------------\n    markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start")\n    \n    sketchInPlaceBuilder1 = workPart.Sketches.CreateSketchInPlaceBuilder2(NXOpen.Sketch.Null)\n    \n    origin1 = NXOpen.Point3d(0.0, 0.0, 0.0)\n    normal1 = NXOpen.Vector3d(0.0, 0.0, 1.0)\n    plane1 = workPart.Planes.CreatePlane(origin1, normal1, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    sketchInPlaceBuilder1.PlaneReference = plane1\n    \n    unit1 = workPart.UnitCollection.FindObject("MilliMeter")\n    \n    sketchAlongPathBuilder1 = workPart.Sketches.CreateSketchAlongPathBuilder(NXOpen.Sketch.Null)\n\n    datumAxis1 = workPart.Datums.FindObject("DATUM_CSYS(0) X axis")\n    direction1 = workPart.Directions.CreateDirection(datumAxis1, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    datumPlane1 = workPart.Datums.FindObject("DATUM_CSYS(0) XY plane")\n    datumCsys1 = workPart.Features.FindObject("DATUM_CSYS(0)")\n    point1 = datumCsys1.FindObject("POINT 1")\n    xform1 = workPart.Xforms.CreateXformByPlaneXDirPoint(datumPlane1, direction1, point1, NXOpen.SmartObject.UpdateOption.WithinModeling, 0.625, False, False)\n    \n    cartesianCoordinateSystem1 = workPart.CoordinateSystems.CreateCoordinateSystem(xform1, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    sketchInPlaceBuilder1.Csystem = cartesianCoordinateSystem1\n\n    origin3 = NXOpen.Point3d(0.0, 0.0, 0.0)\n    normal3 = NXOpen.Vector3d(0.0, 0.0, 1.0)\n    plane3 = workPart.Planes.CreatePlane(origin3, normal3, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    plane3.SetMethod(NXOpen.PlaneTypes.MethodType.Coincident)\n    \n    geom2 = [NXOpen.NXObject.Null] * 1 \n    geom2[0] = datumPlane1\n    plane3.SetGeometry(geom2)\n    \n    plane3.SetAlternate(NXOpen.PlaneTypes.AlternateType.One)\n    \n    plane3.Evaluate()\n\n    # ----------------------------------------------\n    #   Menu: Insert->Sketch Curve->Rectangle...\n    # ----------------------------------------------\n\n    markId3 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Create Sketch")\n\n    nXObject1 = sketchInPlaceBuilder1.Commit()\n    \n    sketch1 = nXObject1\n    feature1 = sketch1.Feature\n    \n    sketch1.Activate(NXOpen.Sketch.ViewReorient.TrueValue)\n    \n    theSession.DeleteUndoMark(markId3, None)\n    \n    theSession.SetUndoMarkName(markId1, "Create Sketch")\n    \n    sketchInPlaceBuilder1.Destroy()\n    \n    sketchAlongPathBuilder1.Destroy()\n        \n    plane3.DestroyPlane()\n    \n    markId5 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Profile short list")\n    \n    markId6 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Create Rectangle")\n    \n    theSession.SetUndoMarkVisibility(markId6, "Create Rectangle", NXOpen.Session.MarkVisibility.Visible)\n    \n    # ----------------------------------------------\n    # Creating rectangle using By 2 Points method \n    # ----------------------------------------------\n    startPoint1 = NXOpen.Point3d(-52.0, 42.0, 0.0)\n    endPoint1 = NXOpen.Point3d(44.0, 42.0, 0.0)\n    line1 = workPart.Curves.CreateLine(startPoint1, endPoint1)\n    \n    startPoint2 = NXOpen.Point3d(44.0, 42.0, 0.0)\n    endPoint2 = NXOpen.Point3d(44.0, -42.0, 0.0)\n    line2 = workPart.Curves.CreateLine(startPoint2, endPoint2)\n    \n    startPoint3 = NXOpen.Point3d(44.0, -42.0, 0.0)\n    endPoint3 = NXOpen.Point3d(-52.0, -42.0, 0.0)\n    line3 = workPart.Curves.CreateLine(startPoint3, endPoint3)\n    \n    startPoint4 = NXOpen.Point3d(-52.0, -42.0, 0.0)\n    endPoint4 = NXOpen.Point3d(-52.0, 42.0, 0.0)\n    line4 = workPart.Curves.CreateLine(startPoint4, endPoint4)\n    \n    theSession.ActiveSketch.AddGeometry(line1, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n    \n    theSession.ActiveSketch.AddGeometry(line2, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n    \n    theSession.ActiveSketch.AddGeometry(line3, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n    \n    theSession.ActiveSketch.AddGeometry(line4, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n\n    theSession.ActiveSketch.Update()\n    \n    theSession.Preferences.Sketch.AutoDimensionsToArcCenter = True\n    \n    geoms1 = [NXOpen.SmartObject.Null] * 4 \n    geoms1[0] = line1\n    geoms1[1] = line2\n    geoms1[2] = line3\n    geoms1[3] = line4\n    theSession.ActiveSketch.UpdateConstraintDisplay(geoms1)\n    # ----------------------------------------------\n    #   Menu: File->Finish Sketch\n    # ----------------------------------------------\n    sketch2 = theSession.ActiveSketch\n    # ----------------------------------------------\n    #   Menu: Insert->Design Feature->Extrude...\n    # ----------------------------------------------\n    markId8 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start")\n    \n    extrudeBuilder1 = workPart.Features.CreateExtrudeBuilder(NXOpen.Features.Feature.Null)\n    \n    section1 = workPart.Sections.CreateSection(0.0094999999999999998, 0.01, 0.5)\n    \n    extrudeBuilder1.Section = section1\n    \n    extrudeBuilder1.AllowSelfIntersectingSection(True)\n    \n    unit2 = extrudeBuilder1.Draft.FrontDraftAngle.Units\n  \n    features1 = [NXOpen.Features.Feature.Null] * 1 \n    sketchFeature1 = feature1\n    features1[0] = sketchFeature1\n    curveFeatureRule1 = workPart.ScRuleFactory.CreateRuleCurveFeature(features1)\n    \n    section1.AllowSelfIntersection(True)\n    \n    rules1 = [None] * 1 \n    rules1[0] = curveFeatureRule1\n    helpPoint1 = NXOpen.Point3d(-52.0, 18.603986789941445, 3.5527136788005009e-15)\n    section1.AddToSection(rules1, line4, NXOpen.NXObject.Null, NXOpen.NXObject.Null, helpPoint1, NXOpen.Section.Mode.Create, False)\n\n    direction2 = workPart.Directions.CreateDirection(sketch2, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    extrudeBuilder1.Direction = direction2\n    \n    extrudeBuilder1.Limits.EndExtend.Value.RightHandSide = "50"\n\n    extrudeBuilder1.ParentFeatureInternal = False\n    \n    feature2 = extrudeBuilder1.CommitFeature()\n\n    # ----------------------------------------------\n    #   Menu: Tools->Journal->Stop Recording\n    # ----------------------------------------------\n    \nif __name__ == \'__main__\':\n    main() \n bounding_box.py \n import NXOpen\nimport NXOpen.UF\n\ntheSession = NXOpen.Session.GetSession()\ntheLw = theSession.ListingWindow\ntheUI = NXOpen.UI.GetUI()\ntheUfSession = NXOpen.UF.UFSession.GetUFSession()\n\ndef main(*args): \n\n    workPart = theSession.Parts.BaseWork\n\n    bodies = workPart.Bodies\n\n    for body in bodies:\n\n        (min_corner, directions, distances) = theUfSession.ModlGeneral.AskBoundingBoxExact(body.Tag, 0)\n\n        theLw.Open()\n        theLw.WriteLine("Bounding box for " + body.JournalIdentifier)\n\n        theLw.WriteLine("  Min Corner: ")\n        theLw.WriteLine("    X: " + str(min_corner[0]))\n        theLw.WriteLine("    Y: " + str(min_corner[1]))\n        theLw.WriteLine("    Z: " + str(min_corner[2]))\n\n        theLw.WriteLine("  Direction Vectors: ")\n        theLw.WriteLine("    X: (" + str(directions[0][0]) + ", " + str(directions[0][1]) + ", " + str(directions[0][2]) + ")")\n        theLw.WriteLine("    Y: (" + str(directions[1][0]) + ", " + str(directions[1][1]) + ", " + str(directions[1][2]) + ")")\n        theLw.WriteLine("    Z: (" + str(directions[2][0]) + ", " + str(directions[2][1]) + ", " + str(directions[2][2]) + ")")\n\n        theLw.WriteLine("  Distances: ")\n        theLw.WriteLine("    X: " + str(distances[0]))\n        theLw.WriteLine("    Y: " + str(distances[1]))\n        theLw.WriteLine("    Z: " + str(distances[2]))\n\n        theLw.WriteLine("")\n\n# Main program.\n\nif __name__ == "__main__":\n    main()\n \n 上述 NXOpen Python Journal 程式必須在 NX12 GUI 模式下執行, 若需要直接透過 Non-GUI 的模式執行 NXOpen Python Journal 程式, 則必須提供程式執行對應檔案, 並在執行完成後將結果存檔. \n 下列程式, 可以在隨身 NX12 程式可執行的環境中, 提供空白的 newPart.prt 檔案, 然後在命令列透過 run_journal create_cube.py, 建立所需的 cube.prt 立方體檔案. \n # NX 12.0.2.9\n# 提供空檔案 newPart.prt\n# 利用 run_journal journal_newpart.py 以 Non-GUI 的模式執行 NX12, 將可直接建立 cube.prt\n\n#\nimport math\nimport NXOpen\nimport NXOpen.Annotations\nimport NXOpen.Features\nimport NXOpen.GeometricUtilities\nimport NXOpen.Preferences\nimport NXOpen.UF\n\ndef main() : \n    \n    theUI = NXOpen.UI.GetUI()\n    theMsgBox = theUI.NXMessageBox\n    theMsgBox.Show("簡要說明", NXOpen.NXMessageBox.DialogType.Information,"以下流程將建立一個簡單的長方體")\n    \n    theSession  = NXOpen.Session.GetSession()#try to open new part file to edit (different than assemblyFile)\n    NXFile = \'C:/python_journal/newPart.prt\'\n    #use class method to open new session/workPart\n    basepart1, partLoadStatus1 = theSession.Parts.OpenBaseDisplay(NXFile)\n    partLoadStatus1.Dispose()\n    workPart    = theSession.Parts.Work\n    displayPart = theSession.Parts.Display\n\n    # 以下利用 ListingWindow 列出相關資訊, 可用於程式除錯\n    theLw = theSession.ListingWindow\n    # 開啟 console 將資料印出\n    theLw.Open()\n    theLw.WriteLine("theSession 變數目前為: "+str(theSession))\n    \n    # 若直接在 NX12 中執行\n    #workPart = theSession.Parts.Work\n    # ----------------------------------------------\n    #   Menu: Insert->Sketch...\n    # ----------------------------------------------\n    markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start")\n    \n    sketchInPlaceBuilder1 = workPart.Sketches.CreateSketchInPlaceBuilder2(NXOpen.Sketch.Null)\n    \n    origin1 = NXOpen.Point3d(0.0, 0.0, 0.0)\n    normal1 = NXOpen.Vector3d(0.0, 0.0, 1.0)\n    plane1 = workPart.Planes.CreatePlane(origin1, normal1, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    sketchInPlaceBuilder1.PlaneReference = plane1\n    \n    unit1 = workPart.UnitCollection.FindObject("MilliMeter")\n    \n    sketchAlongPathBuilder1 = workPart.Sketches.CreateSketchAlongPathBuilder(NXOpen.Sketch.Null)\n\n    datumAxis1 = workPart.Datums.FindObject("DATUM_CSYS(0) X axis")\n    direction1 = workPart.Directions.CreateDirection(datumAxis1, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    datumPlane1 = workPart.Datums.FindObject("DATUM_CSYS(0) XY plane")\n    datumCsys1 = workPart.Features.FindObject("DATUM_CSYS(0)")\n    point1 = datumCsys1.FindObject("POINT 1")\n    xform1 = workPart.Xforms.CreateXformByPlaneXDirPoint(datumPlane1, direction1, point1, NXOpen.SmartObject.UpdateOption.WithinModeling, 0.625, False, False)\n    \n    cartesianCoordinateSystem1 = workPart.CoordinateSystems.CreateCoordinateSystem(xform1, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    sketchInPlaceBuilder1.Csystem = cartesianCoordinateSystem1\n\n    origin3 = NXOpen.Point3d(0.0, 0.0, 0.0)\n    normal3 = NXOpen.Vector3d(0.0, 0.0, 1.0)\n    plane3 = workPart.Planes.CreatePlane(origin3, normal3, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    plane3.SetMethod(NXOpen.PlaneTypes.MethodType.Coincident)\n    \n    geom2 = [NXOpen.NXObject.Null] * 1 \n    geom2[0] = datumPlane1\n    plane3.SetGeometry(geom2)\n    \n    plane3.SetAlternate(NXOpen.PlaneTypes.AlternateType.One)\n    \n    plane3.Evaluate()\n\n    # ----------------------------------------------\n    #   Menu: Insert->Sketch Curve->Rectangle...\n    # ----------------------------------------------\n\n    markId3 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Create Sketch")\n\n    nXObject1 = sketchInPlaceBuilder1.Commit()\n    \n    sketch1 = nXObject1\n    feature1 = sketch1.Feature\n    \n    sketch1.Activate(NXOpen.Sketch.ViewReorient.TrueValue)\n    \n    theSession.DeleteUndoMark(markId3, None)\n    \n    theSession.SetUndoMarkName(markId1, "Create Sketch")\n    \n    sketchInPlaceBuilder1.Destroy()\n    \n    sketchAlongPathBuilder1.Destroy()\n        \n    plane3.DestroyPlane()\n    \n    markId5 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Profile short list")\n    \n    markId6 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Create Rectangle")\n    \n    theSession.SetUndoMarkVisibility(markId6, "Create Rectangle", NXOpen.Session.MarkVisibility.Visible)\n    \n    # ----------------------------------------------\n    # Creating rectangle using By 2 Points method \n    # ----------------------------------------------\n    startPoint1 = NXOpen.Point3d(-52.0, 42.0, 0.0)\n    endPoint1 = NXOpen.Point3d(44.0, 42.0, 0.0)\n    line1 = workPart.Curves.CreateLine(startPoint1, endPoint1)\n    \n    startPoint2 = NXOpen.Point3d(44.0, 42.0, 0.0)\n    endPoint2 = NXOpen.Point3d(44.0, -42.0, 0.0)\n    line2 = workPart.Curves.CreateLine(startPoint2, endPoint2)\n    \n    startPoint3 = NXOpen.Point3d(44.0, -42.0, 0.0)\n    endPoint3 = NXOpen.Point3d(-52.0, -42.0, 0.0)\n    line3 = workPart.Curves.CreateLine(startPoint3, endPoint3)\n    \n    startPoint4 = NXOpen.Point3d(-52.0, -42.0, 0.0)\n    endPoint4 = NXOpen.Point3d(-52.0, 42.0, 0.0)\n    line4 = workPart.Curves.CreateLine(startPoint4, endPoint4)\n    \n    theSession.ActiveSketch.AddGeometry(line1, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n    \n    theSession.ActiveSketch.AddGeometry(line2, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n    \n    theSession.ActiveSketch.AddGeometry(line3, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n    \n    theSession.ActiveSketch.AddGeometry(line4, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n\n    theSession.ActiveSketch.Update()\n    \n    theSession.Preferences.Sketch.AutoDimensionsToArcCenter = True\n    \n    geoms1 = [NXOpen.SmartObject.Null] * 4 \n    geoms1[0] = line1\n    geoms1[1] = line2\n    geoms1[2] = line3\n    geoms1[3] = line4\n    theSession.ActiveSketch.UpdateConstraintDisplay(geoms1)\n    # ----------------------------------------------\n    #   Menu: File->Finish Sketch\n    # ----------------------------------------------\n    sketch2 = theSession.ActiveSketch\n    # ----------------------------------------------\n    #   Menu: Insert->Design Feature->Extrude...\n    # ----------------------------------------------\n    markId8 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start")\n    \n    extrudeBuilder1 = workPart.Features.CreateExtrudeBuilder(NXOpen.Features.Feature.Null)\n    \n    section1 = workPart.Sections.CreateSection(0.0094999999999999998, 0.01, 0.5)\n    \n    extrudeBuilder1.Section = section1\n    \n    extrudeBuilder1.AllowSelfIntersectingSection(True)\n    \n    unit2 = extrudeBuilder1.Draft.FrontDraftAngle.Units\n  \n    features1 = [NXOpen.Features.Feature.Null] * 1 \n    sketchFeature1 = feature1\n    features1[0] = sketchFeature1\n    curveFeatureRule1 = workPart.ScRuleFactory.CreateRuleCurveFeature(features1)\n    \n    section1.AllowSelfIntersection(True)\n    \n    rules1 = [None] * 1 \n    rules1[0] = curveFeatureRule1\n    helpPoint1 = NXOpen.Point3d(-52.0, 18.603986789941445, 3.5527136788005009e-15)\n    section1.AddToSection(rules1, line4, NXOpen.NXObject.Null, NXOpen.NXObject.Null, helpPoint1, NXOpen.Section.Mode.Create, False)\n\n    direction2 = workPart.Directions.CreateDirection(sketch2, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)\n    \n    extrudeBuilder1.Direction = direction2\n    \n    extrudeBuilder1.Limits.EndExtend.Value.RightHandSide = "50"\n\n    extrudeBuilder1.ParentFeatureInternal = False\n    \n    feature2 = extrudeBuilder1.CommitFeature()\n    # 將 basepart1 存檔\n    newNXFile = \'C:/python_journal/cube.prt\'\n    basepart1.SaveAs(newNXFile)\n\n    # ----------------------------------------------\n    #   Menu: Tools->Journal->Stop Recording\n    # ----------------------------------------------\n    \nif __name__ == \'__main__\':\n    main()\n \n 假如希望利用  https://mde.tw/cp2019 \xa0中的 Dart 網際或 Flutter 手機程式與伺服器中的 NXOpen Python API 程式互動, 可以利用 Flask 網際程式結合下列 Python API 程式碼, 透過手機介面輸入零組件設計參數, 所完成的零組件則以 STL 或 WRL 格式輸出, 進一步轉入 Webots 執行動態模擬. \n NXOpen.UI \n NXMessageBox \n NXOpen.Session \n NXOpen.Point3d \n CreateExtrudeBuilder \n # NX 12.0.2.9\n# 提供空檔案 newPart.prt\n# 利用 run_journal journal_newpart.py 以 Non-GUI 的模式執行 NX12, 將可直接建立 cube.prt\n \n#\nimport math\nimport NXOpen\nimport NXOpen.Annotations\nimport NXOpen.Features\nimport NXOpen.GeometricUtilities\nimport NXOpen.Preferences\nimport NXOpen.UF\n \ndef main() : \n     \n    theUI = NXOpen.UI.GetUI()\n    theMsgBox = theUI.NXMessageBox\n    theMsgBox.Show("簡要說明", NXOpen.NXMessageBox.DialogType.Information,"以下流程將建立一個簡單的長方體")\n     \n    theSession  = NXOpen.Session.GetSession()#try to open new part file to edit (different than assemblyFile)\n    NXFile = \'y:/newPart.prt\'\n    #use class method to open new session/workPart\n    basepart1, partLoadStatus1 = theSession.Parts.OpenBaseDisplay(NXFile)\n    partLoadStatus1.Dispose()\n    workPart    = theSession.Parts.Work\n    displayPart = theSession.Parts.Display\n \n    # 以下利用 ListingWindow 列出相關資訊, 可用於程式除錯\n    theLw = theSession.ListingWindow\n    # 開啟 console 將資料印出\n    theLw.Open()\n    theLw.WriteLine("theSession 變數目前為: "+str(theSession))\n     \n    # 若直接在 NX12 中執行\n    #workPart = theSession.Parts.Work\n    # ----------------------------------------------\n    #   Menu: Insert->Sketch...\n    # ----------------------------------------------\n    markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start")\n     \n    sketchInPlaceBuilder1 = workPart.Sketches.CreateSketchInPlaceBuilder2(NXOpen.Sketch.Null)\n     \n    origin1 = NXOpen.Point3d(0.0, 0.0, 0.0)\n    normal1 = NXOpen.Vector3d(0.0, 0.0, 1.0)\n    plane1 = workPart.Planes.CreatePlane(origin1, normal1, NXOpen.SmartObject.UpdateOption.WithinModeling)\n     \n    sketchInPlaceBuilder1.PlaneReference = plane1\n     \n    unit1 = workPart.UnitCollection.FindObject("MilliMeter")\n     \n    sketchAlongPathBuilder1 = workPart.Sketches.CreateSketchAlongPathBuilder(NXOpen.Sketch.Null)\n \n    datumAxis1 = workPart.Datums.FindObject("DATUM_CSYS(0) X axis")\n    direction1 = workPart.Directions.CreateDirection(datumAxis1, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)\n     \n    datumPlane1 = workPart.Datums.FindObject("DATUM_CSYS(0) XY plane")\n    datumCsys1 = workPart.Features.FindObject("DATUM_CSYS(0)")\n    point1 = datumCsys1.FindObject("POINT 1")\n    xform1 = workPart.Xforms.CreateXformByPlaneXDirPoint(datumPlane1, direction1, point1, NXOpen.SmartObject.UpdateOption.WithinModeling, 0.625, False, False)\n     \n    cartesianCoordinateSystem1 = workPart.CoordinateSystems.CreateCoordinateSystem(xform1, NXOpen.SmartObject.UpdateOption.WithinModeling)\n     \n    sketchInPlaceBuilder1.Csystem = cartesianCoordinateSystem1\n \n    origin3 = NXOpen.Point3d(0.0, 0.0, 0.0)\n    normal3 = NXOpen.Vector3d(0.0, 0.0, 1.0)\n    plane3 = workPart.Planes.CreatePlane(origin3, normal3, NXOpen.SmartObject.UpdateOption.WithinModeling)\n     \n    plane3.SetMethod(NXOpen.PlaneTypes.MethodType.Coincident)\n     \n    geom2 = [NXOpen.NXObject.Null] * 1\n    geom2[0] = datumPlane1\n    plane3.SetGeometry(geom2)\n     \n    plane3.SetAlternate(NXOpen.PlaneTypes.AlternateType.One)\n     \n    plane3.Evaluate()\n \n    # ----------------------------------------------\n    #   Menu: Insert->Sketch Curve->Rectangle...\n    # ----------------------------------------------\n \n    markId3 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Create Sketch")\n \n    nXObject1 = sketchInPlaceBuilder1.Commit()\n     \n    sketch1 = nXObject1\n    feature1 = sketch1.Feature\n     \n    sketch1.Activate(NXOpen.Sketch.ViewReorient.TrueValue)\n     \n    theSession.DeleteUndoMark(markId3, None)\n     \n    theSession.SetUndoMarkName(markId1, "Create Sketch")\n     \n    sketchInPlaceBuilder1.Destroy()\n     \n    sketchAlongPathBuilder1.Destroy()\n         \n    plane3.DestroyPlane()\n     \n    markId5 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Profile short list")\n     \n    markId6 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Create Rectangle")\n     \n    theSession.SetUndoMarkVisibility(markId6, "Create Rectangle", NXOpen.Session.MarkVisibility.Visible)\n     \n    # ----------------------------------------------\n    # Creating rectangle using By 2 Points method \n    # ----------------------------------------------\n    startPoint1 = NXOpen.Point3d(-52.0, 42.0, 0.0)\n    endPoint1 = NXOpen.Point3d(44.0, 42.0, 0.0)\n    line1 = workPart.Curves.CreateLine(startPoint1, endPoint1)\n     \n    startPoint2 = NXOpen.Point3d(44.0, 42.0, 0.0)\n    endPoint2 = NXOpen.Point3d(44.0, -42.0, 0.0)\n    line2 = workPart.Curves.CreateLine(startPoint2, endPoint2)\n     \n    startPoint3 = NXOpen.Point3d(44.0, -42.0, 0.0)\n    endPoint3 = NXOpen.Point3d(-52.0, -42.0, 0.0)\n    line3 = workPart.Curves.CreateLine(startPoint3, endPoint3)\n     \n    startPoint4 = NXOpen.Point3d(-52.0, -42.0, 0.0)\n    endPoint4 = NXOpen.Point3d(-52.0, 42.0, 0.0)\n    line4 = workPart.Curves.CreateLine(startPoint4, endPoint4)\n     \n    theSession.ActiveSketch.AddGeometry(line1, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n     \n    theSession.ActiveSketch.AddGeometry(line2, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n     \n    theSession.ActiveSketch.AddGeometry(line3, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n     \n    theSession.ActiveSketch.AddGeometry(line4, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)\n \n    theSession.ActiveSketch.Update()\n     \n    theSession.Preferences.Sketch.AutoDimensionsToArcCenter = True\n     \n    geoms1 = [NXOpen.SmartObject.Null] * 4\n    geoms1[0] = line1\n    geoms1[1] = line2\n    geoms1[2] = line3\n    geoms1[3] = line4\n    theSession.ActiveSketch.UpdateConstraintDisplay(geoms1)\n    # ----------------------------------------------\n    #   Menu: File->Finish Sketch\n    # ----------------------------------------------\n    sketch2 = theSession.ActiveSketch\n    # ----------------------------------------------\n    #   Menu: Insert->Design Feature->Extrude...\n    # ----------------------------------------------\n    markId8 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start")\n     \n    extrudeBuilder1 = workPart.Features.CreateExtrudeBuilder(NXOpen.Features.Feature.Null)\n     \n    section1 = workPart.Sections.CreateSection(0.0094999999999999998, 0.01, 0.5)\n     \n    extrudeBuilder1.Section = section1\n     \n    extrudeBuilder1.AllowSelfIntersectingSection(True)\n     \n    unit2 = extrudeBuilder1.Draft.FrontDraftAngle.Units\n   \n    features1 = [NXOpen.Features.Feature.Null] * 1\n    sketchFeature1 = feature1\n    features1[0] = sketchFeature1\n    curveFeatureRule1 = workPart.ScRuleFactory.CreateRuleCurveFeature(features1)\n     \n    section1.AllowSelfIntersection(True)\n     \n    rules1 = [None] * 1\n    rules1[0] = curveFeatureRule1\n    helpPoint1 = NXOpen.Point3d(-52.0, 18.603986789941445, 3.5527136788005009e-15)\n    section1.AddToSection(rules1, line4, NXOpen.NXObject.Null, NXOpen.NXObject.Null, helpPoint1, NXOpen.Section.Mode.Create, False)\n \n    direction2 = workPart.Directions.CreateDirection(sketch2, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)\n     \n    extrudeBuilder1.Direction = direction2\n     \n    extrudeBuilder1.Limits.EndExtend.Value.RightHandSide = "50"\n \n    extrudeBuilder1.ParentFeatureInternal = False\n     \n    feature2 = extrudeBuilder1.CommitFeature()\n    # 將 basepart1 存檔\n    #newNXFile = \'y:/cube.prt\'\n    #basepart1.SaveAs(newNXFile)\n    # 將零件檔案存為 wrl 格式\n    theUFSession = NXOpen.UF.UFSession.GetUFSession()\n    UF_STD_OUTPUT_VRML_2 = 8\n    theUFSession.Std.CreateVrmlFile("y:/cube.wrl", 1.0, UF_STD_OUTPUT_VRML_2)\n    print("已經將零件轉為 wrl 檔案")\n    # ----------------------------------------------\n    #   Menu: Tools->Journal->Stop Recording\n    # ----------------------------------------------\n     \nif __name__ == \'__main__\':\n    main() \n 參考資料 \n NXOpen VB 轉為 Python: \n https://community.sw.siemens.com/s/question/0D54O000061xRnYSAU/convert-vb-to-python \n NX 與  Cura :\xa0 https://github.com/Ultimaker/cura-siemensnx-plugin \xa0', 'tags': '', 'url': 'NX.html'}, {'title': '設計修改', 'text': '產品設計在何種情況下需要修改? \n 由誰修改? \n 如何修改? \n 修改後的新舊版本內容如何保存? \n 如何完整擷取各階段修改前後的版本資料? \n 存在個人筆記本或電腦上的資料能夠永續保存嗎? \n 寫入藍光碟? \n 每一個版本修改細節如何進行註記? \n 假如涉及修改設計內容的人員多達數十人?數百人?甚至更多? \n \xa0某一產品推出後已經銷售一定數量, 若部分零件因瑕疵修改, 需要全數 recall 還是等故障才回廠維修?假如設計變更零件屬於功能提升, 是否新舊零件都需維護一定數量的備品? \n Onshape 與 SolidWorks 就本質上有何不同? \n 有聽過產品生命週期管理嗎?為何產品需要設定生命週期? \n 某一型的電腦訂出保固五年的意思是什麼? \n 五年內產品一定不會故障? \n 五年內若產品故障, 可以保證修好?一定負責提供所需備料? \n 一台汽柴油車若其生命週期為 20 年, 原廠如何預估各種維修備品的數量?如何定價? \n 聽過 aftermarket spare parts 嗎?\xa0 https://www.swag.de/ \n \n', 'tags': '', 'url': '設計修改.html'}, {'title': '設計分析', 'text': '2014_Integration_of_Modeling_in_Solidworks_and_MatlabSi.pdf \n 2014_Virtual plants in machine automation research and development.pdf \n https://github.com/mdecourse/half-car \xa0 \n half-car_dynamic-analysis.pdf \n http://sites.science.oregonstate.edu/~landaur/Books/CPbook/ \xa0 \n Computational Physics with Python.pdf  (for @gm users only) \n Issues: \n 為何需要進行 dynamic analysis? \n 如何進行 dynamic analysis? \n 如何整理 dynamic analysis 結果? \n 如何呈現 dynamic analysis 結果? \n 電腦輔助設計 \n 產品設計只需要奮力畫出最終產品的 3D 零組件即可?各零件的尺寸由誰決定? \n 何謂電腦輔助參數設計?Parametric design?設計為何需要用參數表示零件尺寸? \n 參數設計流程中的參數若其數量高達數百個, 且在設計製造或與客戶溝通過程需要滿足特定約束條件而不斷修改, 此一流程採人工修改好?或者能夠利用計算機程式流程修改? \n 電腦輔助工程分析 \n Apple 設計手機過程需要進行工程分析嗎? \n 電腦輔助製造 \n Apple 為何不自己製造手機?', 'tags': '', 'url': '設計分析.html'}, {'title': '設計模擬', 'text': '6-axis Robot Simulator download  (for @gm user only)', 'tags': '', 'url': '設計模擬.html'}, {'title': 'Sigmoid', 'text': 'A sigmoid function is a mathematical function having a characteristic "S"-shaped curve or sigmoid curve. A common example of a sigmoid function is the logistic function defined by the formula: \n Logistic Function (邏輯函式): \n ${ \\large S(x) = \\LARGE \\frac{\\mathrm{1}} {\\mathrm{1} + e^{-x}}} $ \n ${\\large \\begin{align} \\dfrac{d}{dx} S(x) &= \\dfrac{d}{dx} \\left[ \\dfrac{1}{1 + e^{-x}} \\right] \\\\ &= \\dfrac{d}{dx} \\left( 1 + \\mathrm{e}^{-x} \\right)^{-1} \\\\ &= -(1 + e^{-x})^{-2}(-e^{-x}) \\\\ &= \\dfrac{e^{-x}}{\\left(1 + e^{-x}\\right)^2} \\\\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\dfrac{e^{-x}}{1 + e^{-x}} \\\\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\dfrac{(1 + e^{-x}) - 1}{1 + e^{-x}} \\\\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\left( \\dfrac{1 + e^{-x}}{1 + e^{-x}} - \\dfrac{1}{1 + e^{-x}} \\right) \\\\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\left( 1 - \\dfrac{1}{1 + e^{-x}} \\right) \\\\ &= S(x) \\cdot (1 - S(x)) \\end{align}}$ \n 另外一種對 Logistic function 微分的推導法:  因為 ${\\Large f(x)=\\dfrac{1}{S(x)} = 1+e^{-x} }$   先對左邊的表示式微分可以得到:  ${\\Large f\'(x) = \\frac{d}{dx} \\biggl( \\frac{1}{S(x)} \\biggr) = -\\frac{S\'(x)}{S(x)^2} }$   接著再對右邊的表示式微分可以得到:   ${\\Large f\'(x) = \\frac{d}{dx} \\bigl( 1+e^{-x} \\bigr) = -e^{-x} = 1-f(x) = 1 - \\frac{1}{S(x)} = \\frac{S(x)-1}{S(x)} }$ 最後再將兩個式子合併整理一下, 就可以得到: \n ${\\large S\'(x) = \\dfrac{d}{dx} S(x) = S(x) \\cdot (1 - S(x))}$ \n 假如使用 sympy 以符號式運算求 Logistic function 的微分式: \n import sympy\n\nx = sympy.Symbol(\'x\')\n\ndef f(x):\n    return 1/(1+sympy.exp(-x))\n\ndef d(x):\n    return sympy.diff(f(x), x)\n\nprint(d(x))\n\n# d(x) = exp(-x)/(1 + exp(-x))**2 \n 已知從 這裡 可以利用 Python 加上 Matplotlib 畫出 Logistic function, 程式如下: \n #import section\nfrom matplotlib import pylab\nimport pylab as plt\nimport numpy as np\n\n#sigmoid = lambda x: 1 / (1 + np.exp(-x))\ndef sigmoid(x):\n    return (1 / (1 + np.exp(-x)))\n\n# generate an Array with value ???\n# linespace generate an array from start and stop value\n# with requested number of elements. Example 10 elements or 100 elements.\n# \nx = plt.linspace(-10,10,10)\ny = plt.linspace(-10,10,100)\n\n# prepare the plot, associate the color r(ed) or b(lue) and the label \nplt.plot(x, sigmoid(x), \'r\', label=\'linspace(-10,10,10)\')\nplt.plot(y, sigmoid(y), \'b\', label=\'linspace(-10,10,100)\')\n\n# Draw the grid line in background.\nplt.grid()\n\n# Title & Subtitle\nplt.title(\'Sigmoid Function\')\nplt.suptitle(\'Sigmoid\')\n\n# place the legen boc in bottom right of the graph\nplt.legend(loc=\'lower right\')\n\n# write the Sigmoid formula\nplt.text(4, 0.8, r\'$\\sigma(x)=\\frac{1}{1+e^{-x}}$\', fontsize=15)\n\n#resize the X and Y axes\nplt.gca().xaxis.set_major_locator(plt.MultipleLocator(1))\nplt.gca().yaxis.set_major_locator(plt.MultipleLocator(0.1))\n \n\n# plt.plot(x)\nplt.xlabel(\'X Axis\')\nplt.ylabel(\'Y Axis\')\n\n# create the graph\nplt.show() \n \n 利用 matplotlib 畫出上述手動推導與 Sympy 推導的 Logistic 函式與微分式圖: \n import matplotlib.pyplot as plt\nimport numpy as np\n\ndef sigmoid(x):\n    s=1/(1+np.exp(-x))\n    #ds=s*(1-s)  \n    ds = np.exp(-x)/(1 + np.exp(-x))**2\n    return s,ds\n\nx=np.arange(-6,6,0.01)\n\nplt.plot(x,sigmoid(x)[0], color="#307EC7", linewidth=3, label="sigmoid")\nplt.plot(x,sigmoid(x)[1], color="#9621E2", linewidth=3, label="derivative")\nplt.legend(loc="center right", frameon=False)\nplt.show() \n \n 以下可以直接利用 Javascript 或  Brython  以  Html5 Canvas  直接在網頁中繪出 Logistic 函式圖? \n  啟用 LaTeX equations 編輯  \n \n \n \n 參考資料 \n http://matt.might.net/articles/rendering-mathematical-functions-in-javascript-with-canvas-html/ \xa0 \n https://eloquentjavascript.net/17_canvas.html \xa0 \n https://www.datasciencearth.com/en/symbolic-mathematics-operations-with-sympy/ \xa0', 'tags': '', 'url': 'Sigmoid.html'}, {'title': '設計最佳化', 'text': '2016_Bayesian Optimization with a Neural Network Kernel.pdf \n https://help.solidworks.com/2018/English/SolidWorks/sldworks/c_Using_Optimization_Module.htm \xa0 \n 1 Stochastic Algorithms \n 1.1 Overview 1.2 Random Search 1.3 Adaptive Random Search 1.4 Stochastic Hill Climbing 1.5 Iterated Local Search 1.6 Guided Local Search 1.7 Variable Neighborhood Search 1.8 Greedy Randomized Adaptive Search 1.9 Scatter Search 1.10 Tabu Search 1.11 Reactive Tabu Search \n 2 Evolutionary Algorithms \n 2.1 Overview 2.2 Genetic Algorithm 2.3 Genetic Programming 2.4 Evolution Strategies 2.5 Diﬀerential Evolution 2.6 Evolutionary Programming 2.7 Grammatical Evolution 2.8 Gene Expression Programming 2.9 Learning Classiﬁer System 2.10 Non-dominated Sorting Genetic Algorithm 2.11 Strength Pareto Evolutionary Algorithm \n 3 Physical Algorithms \n 3.1 Overview 3.2 Simulated Annealing 3.3 Extremal Optimization 3.4 Harmony Search 3.5 Cultural Algorithm 3.6 Memetic Algorithm \n 4 Probabilistic Algorithms \n 4.1 Overview 4.2 Population-Based Incremental Learning 4.3 Univariate Marginal Distribution Algorithm 4.4 Compact Genetic Algorithm 4.5 Bayesian Optimization Algorithm 4.6 Cross-Entropy Method \n 5 Swarm Algorithms \n 5.1 Overview 5.2 Particle Swarm Optimization 5.3 Ant System 5.4 Ant Colony System 5.5 Bees Algorithm 5.6 Bacterial Foraging Optimization Algorithm \n 6 Immune Algorithms \n 6.1 Overview 6.2 Clonal Selection Algorithm 6.3 Negative Selection Algorithm  6.4 Artiﬁcial Immune Recognition System 6.5 Immune Network Algorithm 6.6 Dendritic Cell Algorithm \n 7 Neural Algorithms \n 7.1 Overview 7.2 Perceptron 7.3 Back-propagation 7.4 Hopﬁeld Network 7.5 Learning Vector Quantization 7.6 Self-Organizing Map \n Introduction to Genetic Algorithms \n This is an introduction to genetic algorithm methods for optimization. Genetic algorithms were formally introduced in the United States in the 1970s by John Holland at University of Michigan. The continuing price/performance improvements of computational systems has made them attractive for some types of optimization. In particular, genetic algorithms work very well on mixed (continuous and discrete), combinatorial problems. They are less susceptible to getting \'stuck\' at local optima than gradient search methods. But they tend to be computationally expensive. To use a genetic algorithm, you must represent a solution to your problem as a genome (or chromosome). The genetic algorithm then creates a population of solutions and applies genetic operators such as mutation and crossover to evolve the solutions in order to find the best one(s). \n This presentation outlines some of the basics of genetic algorithms. The three most important aspects of using genetic algorithms are: (1) definition of the objective function, (2) definition and implementation of the genetic representation, and (3) definition and implementation of the genetic operators. Once these three have been defined, the generic genetic algorithm should work fairly well. Beyond that you can try many different variations to improve performance, find multiple optima (species - if they exist), or parallelize the algorithms. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Examples: \n https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad \n https://github.com/ahmedfgad/GeneticAlgorithmPython \xa0 \n https://github.com/framp/timetabling-solver \xa0 \n ga.py \n import numpy\n\ndef cal_pop_fitness(equation_inputs, pop):\n    # Calculating the fitness value of each solution in the current population.\n    # The fitness function calulates the sum of products between each input and its corresponding weight.\n    fitness = numpy.sum(pop*equation_inputs, axis=1)\n    return fitness\n\ndef select_mating_pool(pop, fitness, num_parents):\n    # Selecting the best individuals in the current generation as parents for producing the offspring of the next generation.\n    parents = numpy.empty((num_parents, pop.shape[1]))\n    for parent_num in range(num_parents):\n        max_fitness_idx = numpy.where(fitness == numpy.max(fitness))\n        max_fitness_idx = max_fitness_idx[0][0]\n        parents[parent_num, :] = pop[max_fitness_idx, :]\n        fitness[max_fitness_idx] = -99999999999\n    return parents\n\ndef crossover(parents, offspring_size):\n    offspring = numpy.empty(offspring_size)\n    # The point at which crossover takes place between two parents. Usually, it is at the center.\n    crossover_point = numpy.uint8(offspring_size[1]/2)\n\n    for k in range(offspring_size[0]):\n        # Index of the first parent to mate.\n        parent1_idx = k%parents.shape[0]\n        # Index of the second parent to mate.\n        parent2_idx = (k+1)%parents.shape[0]\n        # The new offspring will have its first half of its genes taken from the first parent.\n        offspring[k, 0:crossover_point] = parents[parent1_idx, 0:crossover_point]\n        # The new offspring will have its second half of its genes taken from the second parent.\n        offspring[k, crossover_point:] = parents[parent2_idx, crossover_point:]\n    return offspring\n\ndef mutation(offspring_crossover, num_mutations=1):\n    mutations_counter = numpy.uint8(offspring_crossover.shape[1] / num_mutations)\n    # Mutation changes a number of genes as defined by the num_mutations argument. The changes are random.\n    for idx in range(offspring_crossover.shape[0]):\n        gene_idx = mutations_counter - 1\n        for mutation_num in range(num_mutations):\n            # The random value to be added to the gene.\n            random_value = numpy.random.uniform(-1.0, 1.0, 1)\n            offspring_crossover[idx, gene_idx] = offspring_crossover[idx, gene_idx] + random_value\n            gene_idx = gene_idx + mutations_counter\n    return offspring_crossover \n ga_ex1.py \n import numpy\nimport ga\n\n"""\nThe y=target is to maximize this equation ASAP:\n    y = w1x1+w2x2+w3x3+w4x4+w5x5+6wx6\n    where (x1,x2,x3,x4,x5,x6)=(4,-2,3.5,5,-11,-4.7)\n    What are the best values for the 6 weights w1 to w6?\n    We are going to use the genetic algorithm for the best possible values after a number of generations.\n"""\n\n# Inputs of the equation.\nequation_inputs = [4,-2,3.5,5,-11,-4.7]\n\n# Number of the weights we are looking to optimize.\nnum_weights = len(equation_inputs)\n\n"""\nGenetic algorithm parameters:\n    Mating pool size\n    Population size\n"""\nsol_per_pop = 8\nnum_parents_mating = 4\n\n# Defining the population size.\npop_size = (sol_per_pop,num_weights) # The population will have sol_per_pop chromosome where each chromosome has num_weights genes.\n#Creating the initial population.\nnew_population = numpy.random.uniform(low=-4.0, high=4.0, size=pop_size)\nprint(new_population)\n\n"""\nnew_population[0, :] = [2.4,  0.7, 8, -2,   5,   1.1]\nnew_population[1, :] = [-0.4, 2.7, 5, -1,   7,   0.1]\nnew_population[2, :] = [-1,   2,   2, -3,   2,   0.9]\nnew_population[3, :] = [4,    7,   12, 6.1, 1.4, -4]\nnew_population[4, :] = [3.1,  4,   0,  2.4, 4.8,  0]\nnew_population[5, :] = [-2,   3,   -7, 6,   3,    3]\n"""\n\nbest_outputs = []\nnum_generations = 1000\nfor generation in range(num_generations):\n    print("Generation : ", generation)\n    # Measuring the fitness of each chromosome in the population.\n    fitness = ga.cal_pop_fitness(equation_inputs, new_population)\n    print("Fitness")\n    print(fitness)\n\n    best_outputs.append(numpy.max(numpy.sum(new_population*equation_inputs, axis=1)))\n    # The best result in the current iteration.\n    print("Best result : ", numpy.max(numpy.sum(new_population*equation_inputs, axis=1)))\n    \n    # Selecting the best parents in the population for mating.\n    parents = ga.select_mating_pool(new_population, fitness, \n                                      num_parents_mating)\n    print("Parents")\n    print(parents)\n\n    # Generating next generation using crossover.\n    offspring_crossover = ga.crossover(parents,\n                                       offspring_size=(pop_size[0]-parents.shape[0], num_weights))\n    print("Crossover")\n    print(offspring_crossover)\n\n    # Adding some variations to the offspring using mutation.\n    offspring_mutation = ga.mutation(offspring_crossover, num_mutations=2)\n    print("Mutation")\n    print(offspring_mutation)\n\n    # Creating the new population based on the parents and offspring.\n    new_population[0:parents.shape[0], :] = parents\n    new_population[parents.shape[0]:, :] = offspring_mutation\n    \n# Getting the best solution after iterating finishing all generations.\n#At first, the fitness is calculated for each solution in the final generation.\nfitness = ga.cal_pop_fitness(equation_inputs, new_population)\n# Then return the index of that solution corresponding to the best fitness.\nbest_match_idx = numpy.where(fitness == numpy.max(fitness))\n\nprint("Best solution : ", new_population[best_match_idx, :])\nprint("Best solution fitness : ", fitness[best_match_idx])\n\n\nimport matplotlib.pyplot\nmatplotlib.pyplot.plot(best_outputs)\nmatplotlib.pyplot.xlabel("Iteration")\nmatplotlib.pyplot.ylabel("Fitness")\nmatplotlib.pyplot.show() \n ga_max_ex1.py \n #! /usr/bin/env python\n\nfrom pylab import *\n\n#Functions\n# Define the x function\ndef x_function(x):\n\t#_function = (sin(300)**2)/(1+(x-500)**2)*50\n\t#_function = sin(x)*5+sin(x/10)*5+sin(x/100)*10\n\t_function = 8000*x - 0.25*x**2\n\treturn _function\n\n\n# Convert decimal to a binary string\ndef den2bin(f):\n\tbStr = \'\'\n\tn = int(f)\n\tif n < 0: raise\n\tif n == 0: return \'0\'\n\twhile n > 0:\n\t\tbStr = str(n % 2) + bStr\n\t\tn = n >> 1\n\treturn bStr\n\n#Convert decimal to a binary string of desired size of bits \ndef d2b(f, b):\n\tn = int(f)\n\tbase = int(b)\n\tret = ""\n\tfor y in range(base-1, -1, -1):\n\t\tret += str((n >> y) & 1)\n\treturn ret\n\n\n#Invert Chromosome\ndef invchr(string, position):\n\tif int(string[position]) == 1:\n\t\t\n\t\tstring = string[:position] + \'0\' + string[position+1:]\n\telse:\n\t\tstring = string[:position] + \'1\' + string[position+1:]\n\treturn string\n\n\n#Roulette Wheel\ndef roulette(values, fitness):\n\tn_rand = random()*fitness\n\tsum_fit = 0\n\tfor i in range(len(values)):\n\t\tsum_fit += values[i]\n\t\tif sum_fit >= n_rand:\n\t\t\tbreak\n\treturn i\t\n\n\n\n\n# Genetic Algorithm Code to find the Maximum of F(X)\n\n\n#Range of Values\nx_max = 32000\nx_min = 0\n\n#GA Parameters\n# Due my laziness to do the code, the population size must be a even number and the values for x are always integers.\n# Feel free to correct it :) \npop_size = 100\nmutation_probability = 0.20\nnumber_of_generations = 10\n\n\n#Variables & Lists to be used during the code\ngen_1_xvalues = []\ngen_1_fvalues = []\ngenerations_x = []\ngenerations_f = []\nfitness = 0\n\n\n#Size of the string in bit\nx_size = int(len(den2bin(x_max)))\n\n\nprint("Maximum chromosome size of x is", x_size,  "bits, i.e.,", pow(2,x_size), "variables.")\n\n\n#first population - random values\nfor i in range(pop_size):\n\tx_tmp = int(round(randint(x_max-x_min)+x_min))\n\tgen_1_xvalues.append(x_tmp)\n\n\tf_tmp = x_function(x_tmp)\n\tgen_1_fvalues.append(f_tmp)\n\n\t#Create total fitness\n\tfitness += f_tmp\n#print \'gen 1\', gen_1_xvalues\n\n#Getting maximum value for initial population\nmax_f_gen1 = 0\nfor i in range(pop_size):\n\t\tif gen_1_fvalues[i] >= max_f_gen1:\n\t\t\tmax_f_gen1 = gen_1_fvalues[i]\n\t\t\tmax_x_gen1 = gen_1_xvalues[i]\n\n\n\n\n\n#Starting GA loop\n\nfor i in range(number_of_generations):\n\t#Reseting list for 2nd generation\n\tgen_2_xvalues = []\n\tgen_2_fvalues = []\n\tselected = []\n\n\t#Selecting individuals to reproduce\n\tfor j in range(pop_size):\n\t\tind_sel = roulette(gen_1_fvalues,fitness)\n\t\tselected.append(gen_1_xvalues[ind_sel])\n\n\t#Crossing the selected members\n\tfor j in range(0, pop_size, 2):\n\t\tsel_ind_A = d2b(selected[j],x_size)\n\t\tsel_ind_B = d2b(selected[j+1],x_size)\n\t\n\t#select point to cross over\n\t\tcut_point = randint(1,x_size)\n\t\n\t#new individual AB\n\t\tind_AB = sel_ind_A[:cut_point] + sel_ind_B[cut_point:]\n\n\t#mutation AB\n\t\tran_mut = random()\n\t\tif ran_mut < mutation_probability:\n\t\t\tgene_position = randint(0,x_size)\n\t\t\tind_mut = invchr(ind_AB, gene_position)\n\t\t\tind_AB = ind_mut\n\t\n\t#new individual BA\n\t\tind_BA = sel_ind_B[:cut_point] + sel_ind_A[cut_point:]\t\t\n\n\n\t#mutation BA\n\t\tran_mut = random()\n\t\tif ran_mut < mutation_probability:\n\t\t\tgene_position = randint(0,x_size)\n\t\t\tind_mut = invchr(ind_BA, gene_position)\n\t\t\tind_BA = ind_mut\n\n\t#Creating Generation 2\n\t\tnew_AB = int(ind_AB,2)\n\t\tgen_2_xvalues.append(new_AB)\n\n\t\tnew_f_AB = x_function(new_AB)\n\t\tgen_2_fvalues.append(new_f_AB)\n\n\t\tnew_BA = int(ind_BA,2)\n\t\tgen_2_xvalues.append(new_BA)\n\n\t\tnew_f_BA = x_function(new_BA)\n\t\tgen_2_fvalues.append(new_f_BA)\n\t#print \'gen\',i+2, gen_2_xvalues\n\n\n\t#Getting maximum value\n\tmax_f_gen2 = 0\n\tfor j in range(pop_size):\n\t\tif gen_2_fvalues[j] >= max_f_gen2:\n\t\t\tmax_f_gen2 = gen_2_fvalues[j]\n\t\t\tmax_x_gen2 = gen_2_xvalues[j]\n\n\t#Elitism one individual\n\tif max_f_gen1 > max_f_gen2:\n\t\tmax_f_gen2 = max_f_gen1\n\t\tmax_x_gen2 = max_x_gen1\n\t\tgen_2_fvalues[0] = max_f_gen1\n\t\tgen_2_xvalues[0] = max_x_gen1\n\t\n\t#Transform gen2 into gen1\n\tgen_1_xvalues = gen_2_xvalues\n\tgen_1_fvalues = gen_2_fvalues\n\tmax_x_gen1 = max_x_gen2\n\tmax_f_gen1 = max_f_gen2\n\tgenerations_x.append(max_x_gen2)\n\tgenerations_f.append(max_f_gen2)\n\n\t#Creating new fitness\n\tfitness = 0\n\tfor j in range(pop_size):\n\t\tf_tmp = x_function(gen_1_xvalues[j])\n\t\tfitness += f_tmp\n\n\n#Ploting\n\n#Ploting  Function\nx = arange(x_min,x_max,0.01)\ny = x_function(x)\n\n#figure(1)\nplot(x,y)\nxlabel(\'x\')\nylabel(\'F(x)\')\ntitle(r\'$F(x)$\')\n\n#Ploting data for last generation\nfigure(2)\nplot(gen_2_xvalues,gen_2_fvalues, \'bo\')\nxlabel(\'x\')\nylabel(\'F(x)\')\ntitle(r\'Data for last generation\')\n\n#Ploting data for maximum values for each generation\nfigure(3)\nplot(range(number_of_generations),generations_f, \'ro\')\nxlabel(\'Generations\')\nylabel(\'F(x) Maximum\')\ntitle(r\'$F(x)$\')\nshow()\n\n\t\n\n\n \n real-coded genetic algorithm solve max volume problem: \n import time\nimport math\n  \n  \nclass Chromosome(object):\n  \n    def __init__(self, n=None):\n        self.np = n if n > 0 else 2\n        self.f = 0.0\n        self.v = [0.0] * n\n  \n    def cp(self, obj):\n        """\n        copy all atribute from another chromsome object\n        """\n        self.np = obj.np\n        self.f = obj.f\n        self.v = obj.v[:]\n  \n    def get_v(self, i):\n        return self.v[i]\n  \n    def is_self(self, obj):\n        """\n        check the object is self?\n        """\n        return obj is self\n  \n    def assign(self, obj):\n        if not self.is_self(obj):\n            self.cp(obj)\n  \n  \nclass Genetic(object):\n  \n    def __init__(self, func, pType, nParm, nPop, pCross, pMute, pWin, bDelta, upper, lower):\n        """\n        init(function func)\n        """\n        self.func=func\n        self.pType = pType\n        self.nParm=nParm\n        self.nPop=nPop\n        self.pCross=pCross\n        self.pMute=pMute\n        self.pWin=pWin\n        self.bDelta=bDelta\n  \n        self.chrom = [Chromosome(nParm) for i in range(nPop)]\n        self.newChrom = [Chromosome(nParm) for i in range(nPop)]\n        self.babyChrom = [Chromosome(nParm) for i in range(3)]\n        self.chromElite = [Chromosome(nParm)]\n        self.chromBest = [Chromosome(nParm)]\n        self.maxLimit = upper[:]\n        self.minLimit = lower[:]\n  \n        self.maxGen = None\n        self.gen = None\n  \n        self.seed = 0.0\n        self.iseed = 470211272.0\n        self.mask = 2147483647\n  \n    def check(self, i, v):\n        """\n        If a variable is out of bound,\n        replace it with a random value\n        """\n        if (v > self.maxLimit[i]) or (v < self.minLimit[i]):\n            return self.randVal(self.minLimit[i], self.maxLimit[i])\n        return v\n  \n    def crossOver(self):\n        for i in range(0, self.nPop-1, 2):\n            # crossover\n            if(self.rnd() < self.pCross):\n                for s in range(self.nParm):\n                    # first baby, half father half mother\n                    self.babyChrom[0].v[s] = 0.5 * self.chrom[i].v[s] + 0.5*self.chrom[i+1].v[s];\n                    # second baby, three quaters of fater and quater of mother\n                    self.babyChrom[1].v[s] = self.check(s, 1.5 * self.chrom[i].v[s] - 0.5*self.chrom[i+1].v[s])\n                    # third baby, quater of fater and three quaters of mother\n                    self.babyChrom[2].v[s] = self.check(s,-0.5 * self.chrom[i].v[s] + 1.5*self.chrom[i+1].v[s]);\n  \n                for j in range(3):\n                    self.babyChrom[j].f = self.func(self.babyChrom[j].v)\n                # maximization\n                if self.pType == 1:\n                      \n                    if self.babyChrom[1].f > self.babyChrom[0].f:\n                        self.babyChrom[0], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[0]\n  \n                    if self.babyChrom[2].f > self.babyChrom[0].f:\n                        self.babyChrom[2], self.babyChrom[0] = self.babyChrom[0], self.babyChrom[2]\n  \n                    if self.babyChrom[2].f > self.babyChrom[1].f:\n                        self.babyChrom[2], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[2]\n  \n                else:\n                      \n                    if self.babyChrom[1].f < self.babyChrom[0].f:\n                        self.babyChrom[0], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[0]\n  \n                    if self.babyChrom[2].f < self.babyChrom[0].f:\n                        self.babyChrom[2], self.babyChrom[0] = self.babyChrom[0], self.babyChrom[2]\n  \n                    if self.babyChrom[2].f < self.babyChrom[1].f:\n                        self.babyChrom[2], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[2]\n  \n                # replace first two baby to parent, another one will be\n                self.chrom[i].assign(self.babyChrom[0])\n                self.chrom[i+1].assign(self.babyChrom[1])\n  \n    def delta(self, y):\n        r = float(self.gen) / self.maxGen;\n        return y*self.rnd()*math.pow(1.0-r, self.bDelta)\n  \n    def fitness(self):\n        for j in range(self.nPop):\n            self.chrom[j].f = self.func(self.chrom[j].v)\n  \n        self.chromBest[0].assign(self.chrom[0])\n  \n        for j in range(self.nPop):\n            if self.pType == 1:\n                if(self.chrom[j].f > self.chromBest[0].f):\n                    self.chromBest[0].assign(self.chrom[j])\n            else:\n                if(self.chrom[j].f < self.chromBest[0].f):\n                    self.chromBest[0].assign(self.chrom[j])\n        if self.pType == 1:\n            if(self.chromBest[0].f > self.chromElite[0].f):\n                self.chromElite[0].assign(self.chromBest[0])\n        else:\n            if(self.chromBest[0].f < self.chromElite[0].f):\n                self.chromElite[0].assign(self.chromBest[0])\n  \n    def initialPop(self):\n        for j in range(self.nPop):\n            for i in range(self.nParm):\n                self.chrom[j].v[i] = self.randVal(self.minLimit[i], self.maxLimit[i])\n  \n    def mutate(self):\n        for i in range(self.nPop):\n            if self.rnd() < self.pMute:\n                s = self.random(self.nParm)\n                if (self.random(2) == 0):\n                    self.chrom[i].v[s] += self.delta(self.maxLimit[s]-self.chrom[i].v[s])\n                else:\n                    self.chrom[i].v[s] -= self.delta(self.chrom[i].v[s]-self.minLimit[s])\n  \n    def report(self):\n        if self.gen == 0:\n            print("Genetik results - Initial population")\n        elif self.gen == self.maxGen:\n            print("Final Genetik results at", self.gen, "generations")\n        else:\n            print("Genetik results after", self.gen, "generations")\n  \n        print("Function : %.6f" % (self.chromElite[0].f))\n        for i, p in enumerate(self.chromElite[0].v):\n            print("Var", i+1, ":", p)\n  \n    def select(self):\n        """\n        roulette wheel selection\n        """\n        for i in range(self.nPop):\n            j = self.random(self.nPop)\n            k = self.random(self.nPop)\n            self.newChrom[i].assign(self.chrom[j])\n            if self.pType == 1:\n                if(self.chrom[k].f > self.chrom[j].f) and (self.rnd() > self.pWin):\n                    self.newChrom[i].assign(self.chrom[k])\n            else:\n                if(self.chrom[k].f < self.chrom[j].f) and (self.rnd() < self.pWin):\n                    self.newChrom[i].assign(self.chrom[k])\n        # in this stage, newChrom is select finish\n        # now replace origin chrom\n        for i in range(self.nPop):\n            self.chrom[i].assign(self.newChrom[i])\n  \n        # select random one chrom to be best chrom, make best chrom still exist\n        j = self.random(self.nPop);\n        self.chrom[j].assign(self.chromElite[0])\n  \n    def run(self, mxg, rp):\n        """\n        // **** Init and run GA for maxGen times\n        // **** mxg : maximum generation\n        // **** rp  : report cycle, 0 for final report or\n        // ****       report each mxg modulo rp\n        """\n        self.maxGen = mxg\n        self.rpt = rp\n  \n        self.randomize()\n        self.initialPop()\n        self.chrom[0].f = self.func(self.chrom[0].v)\n        self.chromElite[0].assign(self.chrom[0])\n  \n        self.gen = 0\n        self.fitness()\n        self.report()\n  \n        for self.gen in range(1, self.maxGen + 1):\n            self.select()\n            self.crossOver()\n            self.mutate()\n            self.fitness()\n            if rp != 0:\n                if self.gen % self.rpt == 0:\n                    self.report()\n        self.report()\n  \n    def newSeed(self):\n        if(self.seed == 0.0):\n            self.seed=self.iseed\n        else:\n            self.seed *= 16807.0\n            self.seed = math.fmod(self.seed, self.mask)\n  \n    def rnd(self):\n        self.newSeed()\n        return self.seed/self.mask\n  \n    def randomize(self):\n        self.seed = time.time()\n  \n    def random(self, k):\n        return int(self.rnd()*k)\n  \n    def randVal(self, low, high):\n        number_types = (int, float)\n        if isinstance(low, number_types) and isinstance(high, number_types):\n            return self.rnd()*(high-low)+low\n        raise ValueError\n          \n#fittness function (cost function)\ndef evaluate(designVariablel):\n    surface = 80.0\n    # if pType is 1, the penality is negative (maximization problem)\n    # if pType is 0, the penality is positive (minimization problem)\n    penality = -1000\n  \n    z = (surface-designVariablel[0]*designVariablel[1])/(2.0*(designVariablel[0]\\\n         +designVariablel[1]))\n    volume = designVariablel[0]*designVariablel[1]*z\n    \n    if(volume <= 0):\n        return penality\n  \n    # box length and width need to be larger than 0\n    if(designVariablel[0] <= 0):\n        return penality\n  \n    if(designVariablel[1] <= 0):\n        return penality\n    #return 1+1/(volume*volume)\n    return volume\n  \n#volume = Genetic(self, func, pType, nParm, nPop, pCross, pMute, pWin, bDelta, upper, lower):\nvolume = Genetic(evaluate, 1, 2, 1000, 0.95, 0.05, 0.95, 5, [0, 0], [50, 50])\nvolume.run(1000, 50) \n 利用  https://github.com/rmsolgi/geneticalgorithm  解相同 max volume 問題: \n genecit_algorithm_max_volume_ex.7z \xa0', 'tags': '', 'url': '設計最佳化.html'}, {'title': 'Solvespace', 'text': '假如機電產品的零組件能夠直接在網際架構中, 採參數化設計, 並直接將零組件轉為  CoppeliaSim  模型, 並且直接在網際環境中進行控制系統設計分析與模擬, 將可提升電腦輔助產品設計效能. \n 網際 Solvespace Demo:\xa0 https://files.whitequark.org/SolveSpace/solvespace.html \n 網際 Webots:\xa0 https://robotbenchmark.net/ \n 目前還沒有網際  CoppeliaSim , 也無法直接從任何參數式 3D 設計繪圖套件轉存為  CoppeliaSim  或  Webots  模擬組件. \n 可不可能直接將 Solvespace 中的零組件轉成 CoppeliaSim 或 Webots 系統中的模型? 需要那些技術? \n 我們為何需要自行設法建構這些系統或系統中的關鍵工具? \n 我們為何需要利用雲端系統長期保存自己的學習與設計歷程? \n 我們為何要用程式方法與最佳化設計提升產品開發流程的效能? \n 我們為何需要能在任何一台電腦上完成電腦輔助設計工作項目? \n 我們為何需要使用 SSL 提交推送近端的設計改版內容? \n Geometric Constraint Solver: \n http://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/ \n http://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/ \n https://github.com/mdecourse/protractr \n https://github.com/rgov/shape_solver \n https://github.com/rgov/shape_solver \n sketchflat-internals.pdf \n Parametric Dimension: \n https://github.com/mdecourse/solvespace-w-var-dimension \xa0 \n Reference \n https://solvespace.com/tutorial.pl   \n http://www.farwire.net/SolveSpace-LearningGuide.htm   \n https://github.com/KmolYuan/Pyslvs-UI', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Solvespace Tutorial', 'text': 'Involute Gear \n \n \n \n Reference \n https://thenewstack.io/how-solvespace-is-retooling-its-3d-cad-open-source-community/', 'tags': '', 'url': 'Solvespace Tutorial.html'}, {'title': 'Compile Solvespace', 'text': '\n 上列影片採用  https://www.msys2.org/  編譯  https://github.com/solvespace/solvespace  原始碼. \n 套件名稱帶有 mingw-w64-x86_64 表示用於 MinGW 64 bit 操作系統 \n 更新系統核心組件: \n pacman -Syu \n 安裝基本 C/C++ 編譯與開發工具: \n pacman -S mingw-w64-x86_64-toolchain \n 安裝 CMake \n pacman -S mingw-w64-x86_64-cmake \n 編譯之前必須 rename Y:\\msys64\\usr\\bin\\sh.exe \n 接著就是 build solvespace.exe 可以將 y:\\msys64\\mingw64\\binmingw32-make.exe 複製一份, 命名為 make.exe \n 以 git clone --reucrse-submodules  https://github.com/solvespace/solvespace.git  取下原始碼與子模組. \n 接下來進入倉儲後執行編譯: 編譯結束後, need libwinpthread-1.dll to execute solvespace.exe,  下載 solvespace_bin_kmol.7z  (8MB) \n 編譯程式下載: \n 位於電腦輔助設計室可以直接從  http://a.kmol.info:88  下載. \n 只下載  msys64.7z  (414MB) \n 下載  fall2020_v3.7z  (包含 Python 3.8 與 Msys2, 以及 Solvespace 原始碼) (853MB)', 'tags': '', 'url': 'Compile Solvespace.html'}, {'title': 'Extend Solvespace', 'text': 'https://solvespace.com/forum.pl?action=viewthread&parent=3248&tt=1603186165 \n https://github.com/solvespace/solvespace/blob/master/developer_docs/Solver_Transforms.txt \n https://github.com/mdecourse/slvstopy \n', 'tags': '', 'url': 'Extend Solvespace.html'}, {'title': 'Range3', 'text': 'https://github.com/Range-Software/range3 \xa0', 'tags': '', 'url': 'Range3.html'}, {'title': 'Compile Range3', 'text': '為了 compile Range3, Msys2 除了mingw-w64-x86_64-toolchain 還必須加裝: \n pacman -Sy mingw-w64-x86_64-qt5  pacman -Sy mingw-w64-x86_64-qt5-static  pacman -Sy mingw-w64-x86_64-ffmpeg \n 接著編譯 Range3: \n start Y:\\msys64\\mingw64.exe \n cd /y/tmp/range3 \n ./scripts/build.sh --clean && ./scripts/create_package.sh \n 而為了讓 svg 格式的 icons 能夠正確顯示, 必須納入 Qt5Svg.dll \n 以下套件在電腦輔助設計室可以直接從  http://a.kmol.info:88  下載. \n 下載編譯完成的 Range3 for Windows 64 位元操作系統: \n RangeSoftware3.7z  (25MB) \n 下載可編譯 Range3 的 msys64: \n msys64_qt_qt_static_ffmpeg.7z  (3GB) \n 下載可編譯 Range3 的可攜程式環境系統: \n fall2020_v4.7z  (4GB)', 'tags': '', 'url': 'Compile Range3.html'}, {'title': 'Projects', 'text': '各班分為四組, 每一組所完成的 虛擬機電資系統 所屬零組件, 必須分別利用  Onshape ,  NX 12 與  Solidworks  2017 建立後, 轉檔進入  CoppeliaSim  虛擬環境中, 並以部署在  Heroku  中的網際  Python Remote API  程式與  Flutter  手機程式進行控制. \n 各分組的  CoppeliaSim  系統模擬可在電腦輔助設計室中執行. \n 技術分組 \n \n 建立 機電資系統零組件 , 轉為  STL  格式後進入  CoppeliaSim  虛擬環境 \n 在  CoppeliaSim  環境中按照系統運動與動力特性進行組立並模擬 \n \xa0建立  Python Remote API  近端程式, 用於控制  CoppeliaSim  機電零組件 \n 將  Python Remote API  轉為  Flask  網際程式, 並部署於  Heroku \n 利用  Flutter  建立手機 APP, 送出網際訊號與  Heroku  上的 Remote API 互動 \n 各組員利用  Authorea  編寫個人與分組的 pdf 格式期末報告 \n \n Reference \n https://github.com/AtsushiSakai/PythonRobotics \n 2018 電腦輔助設計實習期末網站 \n http://mde.tw/cadp2018/content/V-rep.html \xa0 \n 鋼球運動系統:  http://lab.kmol.info/2017fall/blog/kmol-2017-fall-cadp-fourbar-three-position-synthesis.html \n Variant Type Constants', 'tags': '', 'url': 'Projects.html'}, {'title': 'Robot', 'text': 'Robotic Systems:\xa0 http://motion.cs.illinois.edu/RoboticSystems/ \xa0 \n Introduction to Robotics:\xa0 https://see.stanford.edu/Course/CS223A \xa0 \n Modern Robotics:  Modern_Robotics-v2.pdf \n http://hades.mech.northwestern.edu/index.php/Modern_Robotics \xa0 \n ABR control library:\xa0 https://github.com/mdecourse/abr_control \xa0 \n https://studywolf.wordpress.com/2017/07/01/abr-control-0-1-repo-public-release/ \n ABR:\xa0 https://appliedbrainresearch.com/ \xa0\xa0 \n Inverse Kinematics \n https://github.com/mdecourse/V-REP-Inverse-Kinematics \xa0 \n \n \n https://github.com/mdecourse/hw01_UR5_coppeliaSim \xa0 \n https://www.haidynmcleod.com/robot-arm-kinematics \xa0 \n inverse_kinematics_solution_of_a_robotic_manipulator_using_python_(two_link).pdf \n inverse_kinematic_analysis_of_robot_manipulators(dissertation_2015).pdf \n https://www.haidynmcleod.com/robot-arm-kinematics \xa0 \n https://github.com/mdecourse/udacity-RoboND-Kinematics \xa0 \n https://github.com/mithi/arm-ik \xa0 \n https://nitishpuri.github.io/posts/robotics/inverse-kinematics-on-kuka-arm-using-ros-and-python/ \xa0 \n https://github.com/mdecourse/RoboND-Kinematics-Project \xa0 \n Design of Electromechanical Robotic System \n https://ocw.mit.edu/courses/mechanical-engineering/2-017j-design-of-electromechanical-robotic-systems-fall-2009/course-text/ \xa0 \n Robot Simulation \n Robot Adventures in Python and C.pdf \n https://github.com/jslee02/awesome-robotics-libraries \xa0 \n Web-based Robot Simulation \n https://robotbenchmark.net/ \n Heroku and Web-based CoppeliaSim \n Flask program on Heroku as Web-based CoppeliaSim \n Heroku server use input form to specify local server ip \n Local Flask use ajax exchanging data with Heroku server \n Local Flask use localhost to communicate with CoppeliaSim \n Machine Learning \n https://github.com/mdecourse/good_robot \xa0', 'tags': '', 'url': 'Robot.html'}, {'title': 'Simulator', 'text': 'https://www.parallemic.org/RoKiSim.html \n https://core.ac.uk/download/pdf/33802005.pdf \xa0 \n https://github.com/mdecourse/scarysim \xa0 \n http://www.ijmo.org/vol10/748-MA03.pdf \xa0 \n https://github.com/mdecourse/qt-stl \xa0 \n https://github.com/mdecourse/ADMeshGUI \xa0', 'tags': '', 'url': 'Simulator.html'}, {'title': 'PyRep', 'text': 'PyRep_bring_V-rep_to_Deep_Robot_Learning.pdf \n https://github.com/mdecourse/site-40623128 \n https://github.com/mdecourse/site-40623130 \n https://github.com/mdecourse/site-40623224 \n https://github.com/mdecourse/vrep-volleyball \n https://github.com/mdecourse/V-REP-YouBot-Demo \n https://github.com/mdecourse/PyRep \n https://github.com/mdecourse/vrep-api-python \n https://github.com/doctorsrn/gym_vrep \n https://github.com/mdecourse/gym-vrep \n https://github.com/mdecourse/VREPQuadcopter', 'tags': '', 'url': 'PyRep.html'}, {'title': 'Web', 'text': '', 'tags': '', 'url': 'Web.html'}, {'title': 'Flutter-Flask', 'text': 'https://github.com/mdecourse/Flutter-Flask-Login \n 目前的電腦輔助設計流程應該是一個雲端系統, 能夠讓使用者透過多元帳號登入, 並能直接利用瀏覽器, 手機或平板執行產品的協同設計. \n https://wcm.kmol.info:8443/ \xa0(只允許特定用戶登入)\xa0 \n https://mde.tw/cad2020/downloads/msketch \xa0 \n https://mde.tw/cad2020/downloads/jstlviewer \xa0 \n https://mde.tw/cad2020/downloads/robot-designer \xa0 \n 以及  https://onshape.com \xa0都是典型的網際機械設計流程範例. \n 為了培養未來有能力與全球網際協同產品開發整合之人才, 至少必須具備 \n \n 碰到問題能夠自行以英文尋找答案的能力 \n 了解  Fundamentals of Geometry Construction \xa0背後的數學基本原理 \n 有能力運用網際分散式版次系統管理所開發的純文字檔案 (Github 與 Fossil SCM) \n 有能力運用計算機程式與網路架構搭建機械設計流程中的工程服務系統 (Python, C/C++, Javascript 與 Flutter) \n 除了利用 MCAD (Mechanical Computer Aided Design) 建構產品零組件外, 還需要設法透過參數設計與網際應用程式介面修改零組件尺寸與組合方式 (在開源的\xa0 https://github.com/solvespace/solvespace \xa0中搭建 API 程式套件) \n 具備機電資整合系統的設計概念, 能夠在  CoppeliaSim  或  Webots  等模擬系統中進行控制系統設計 (機電資整合系統最佳化工程設計分析) \n \n', 'tags': '', 'url': 'Flutter-Flask.html'}, {'title': 'Glowscript', 'text': 'https://www.glowscript.org/ \xa0 \n https://github.com/vpython/glowscript \xa0 \n https://github.com/atsepkov/RapydScript \xa0 \n Examples \n \n \n \n \n \n', 'tags': '', 'url': 'Glowscript.html'}, {'title': 'Rapydscript', 'text': 'Test embedded RapydScript \n \n \n Add from 1 to 10 \n Source Codes: \n <h4>Test embedded RapydScript</h4>\n<script src="https://sw.kovidgoyal.net/rapydscript/repl/rapydscript.js"></script>\n<script>// <![CDATA[\nvar compiler = RapydScript.create_embedded_compiler();\nvar js = compiler.compile(`\ndef hello_world():\n    sum=0\n    for i in range(11):\n        sum=sum+i\n    print(sum)\n    alert("from 1 add to 10 is :" + str(sum))`);\nfunction mySum() {\n    document.body.textContent = js;\n    eval(js);\n    eval(\'hello_world()\');\n};\n// ]]></script>\n<p><button onclick="mySum()">Add from 1 to 10</button></p> \n \n', 'tags': '', 'url': 'Rapydscript.html'}, {'title': 'Atoms', 'text': '\n \n \n \n \n \n Source Codes: \n <div class="glowscript" id="glowscript">\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery-ui.custom.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/package/glow.3.0.min.js"></script>\n<script type="text/javascript">// <![CDATA[\n//--><![CDATA[//><!--\n\n// START JAVASCRIPT\n;(function() {;\nasync function __main__() {\n"use strict";\n\nvar version = ["3.0", "glowscript"];\nArray.prototype.toString = function() { return __parsearray(this) };\nvar scene = canvas();\nvar vector = vec;\nvar axes = [vec(1,0,0), vec(0,1,0), vec(0,0,1)]\n\nvar k = 1\nvar m = 1\nvar spacing = 1.0\nvar atom_radius = 0.3["*"](spacing)\nvar L0 = spacing["-"](1.8["*"](atom_radius))\nvar V0 = pi["*"](pow(0.5["*"](atom_radius),2))["*"](L0) // initial volume of spring\nvar N = 3\nvar crystal = makeCrystal(N, atom_radius, spacing, 0.1["*"](spacing)["*"](sqrt(k["/"](m))))\nscene.center = 0.5["*"](N["-"](1))["*"](vec(1,1,1))\nscene.autoscale = false\nvar dt = 0.04["*"](2["*"](pi)["*"](sqrt(m["/"](k))))\n\n// Display text below the 3D graphics:\nscene.title = "A model of a solid represented as atoms connected by interatomic bonds"\n\nfunction makeCrystal( N, atom_radius, spacing, momentumRange ) {\n    var crystal = { atoms:[], springs:[] }\n    var atom\n    var x,y,z\n\n    function atomAt(np) {\n        if (np.x[">="](0) && np.y[">="](0) && np.z[">="](0) && np.x["<"](N) && np.y["<"](N) && np.z["<"](N))\n            return crystal.atoms[np.x["+"](np.y["*"](N))["+"](np.z["*"](N)["*"](N))]\n        // Otherwise create an invisible wall and return it\n        var w = box()\n        w.visible = false  // comment out to see the true model\n        w.size = atom_radius["*"](vec(1,1,1))\n        w.pos = np["*"](spacing)\n        w.momentum = vec(0,0,0)\n        return w\n    }\n\n    // Create N^3 atoms in a grid\n    for(z=0; z["<"](N); z++)\n        for(y=0; y["<"](N); y++)\n            for(x=0; x["<"](N); x++) {\n                atom = sphere()\n                atom.pos = vec(x,y,z)["*"](spacing)\n                atom.size = 2["*"](atom_radius)["*"](vec(1,1,1))\n                atom.color = vec(0,0.58,0.69)\n                atom.momentum = momentumRange["*"](vec.random())\n                crystal.atoms.push( atom )\n            }\n    \n    // Create a grid of springs linking each atom to the adjacent atoms\n    // in each dimension, or to invisible walls where no atom is adjacent\n    for(var d=0; d["<"](3); d++)\n        for(z=1["-u"](); z["<"](N); z++)\n            for(y=1["-u"](); y["<"](N); y++)\n                for(x=1["-u"](); x["<"](N); x++) {\n                    atom = atomAt(vec(x,y,z))\n                    var neighbor = atomAt(vec(x,y,z)["+"](axes[d]))\n\n                    if (atom.visible || neighbor.visible) {\n                        var spring = helix()\n                        spring.visible = atom.visible && neighbor.visible\n                        spring.thickness = 0.05\n                        spring.size = vec(spacing,atom_radius,atom_radius)\n                        spring.atoms = [ atom, neighbor ]\n                        spring.color = vec(1,0.5,0)\n                        crystal.springs.push(spring)\n                    }\n                }\n    return crystal\n}\n\nwhile (true) {\n    await rate(60)\n    for(var a=0; a["<"](crystal.atoms.length); a++) {\n        var atom = crystal.atoms[a]\n        atom.pos = atom.pos["+"](atom.momentum["/"](m)["*"](dt))\n    }\n    for(var s=0; s["<"](crystal.springs.length); s++) {\n        var spring = crystal.springs[s]\n        spring.axis = spring.atoms[1].pos["-"](spring.atoms[0].pos)\n        var L = mag(spring.axis)\n        spring.axis = spring.axis.norm()\n        spring.pos = spring.atoms[0].pos["+"](0.5["*"](atom_radius)["*"](spring.axis))\n        var Ls = L["-"](1["*"](atom_radius))\n        spring.size.x = Ls\n        var Fdt = spring.axis["*"](k["*"](dt)["*"](1["-"](spacing["/"](L))))\n        spring.atoms[0].momentum = spring.atoms[0].momentum["+"](Fdt)\n        spring.atoms[1].momentum = spring.atoms[1].momentum["-"](Fdt)\n    }\n}\n\n}\n;$(function(){ window.__context = { glowscript_container: $("#glowscript").removeAttr("id") }; __main__() })})()\n// END JAVASCRIPT\n\n//--><!\n// ]]></script>\n</div> \n \n', 'tags': '', 'url': 'Atoms.html'}, {'title': 'Samples', 'text': '\n \n \n \n \n \n Source Codes: \n <div class="glowscript" id="glowscript">\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery-ui.custom.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/package/glow.3.0.min.js"></script>\n<script type="text/javascript">\n\n// START JAVASCRIPT\n;(function() {;\nasync function __main__() {\n"use strict";\n\nvar version = ["3.0", "glowscript"];\nArray.prototype.toString = function() { return __parsearray(this) };\nvar scene = canvas();\nvar vector = vec;\n\nscene.title = "A ball bounces in a box"\n\nvar side = 4.0\nvar thk = 0.3\nvar s2 = 2["*"](side)["-"](thk)\nvar s3 = 2["*"](side)["+"](thk)\nvar wallR = box ( {pos:vec( side, 0, 0), size:vec(thk,s2,s3),  color : color.red} )\nvar wallL = box ( {pos:vec(side["-u"](), 0, 0), size:vec(thk,s2,s3),  color : color.red} )\nvar wallB = box ( {pos:vec(0, side["-u"](), 0), size:vec(s3,thk,s3),  color : color.blue} )\nvar wallT = box ( {pos:vec(0,  side, 0), size:vec(s3,thk,s3),  color : color.blue} )\nvar wallBK = box( {pos:vec(0, 0, side["-u"]()), size:vec(s2,s2,thk), color : color.gray(0.7)} )\n\nvar ball = sphere ( {color : color.green, size : 0.8["*"](vec(1,1,1))} )\nball.mass = 1.0\nball.p = vec (0.15["-u"](), 0.23["-u"](), 0.27)\nattach_trail(ball, {pps:200, retain:100, color:ball.color})\n\nside = side["-"](thk["*"](0.5))["-"](ball.size.x["/"](2))\nvar dt = 0.3\n\nwhile ( true) { \n  // The rate statement tells GlowScript to execute the while statements\n  // about 200 times per second. The "wait" keyword is necessary to permit\n  // periodic updates to the window.\n  await rate(200)\n  ball.pos = ball.pos["+"](ball.p["/"](ball.mass)["*"](dt))\n  if (! (side["-u"]()["<"](ball.pos.x) && ball.pos.x["<"](side))) { \n    ball.p.x = ball.p.x["-u"]()\n  }\n  if (! (side["-u"]()["<"](ball.pos.y) && ball.pos.y["<"](side))) { \n    ball.p.y = ball.p.y["-u"]()\n  }\n  if (! (side["-u"]()["<"](ball.pos.z) && ball.pos.z["<"](side))) { \n    ball.p.z = ball.p.z["-u"]()\n  }\n}\n\n}\n;$(function(){ window.__context = { glowscript_container: $("#glowscript").removeAttr("id") }; __main__() })})()\n// END JAVASCRIPT\n</script>\n</div> \n \n', 'tags': '', 'url': 'Samples.html'}, {'title': 'RLearning', 'text': 'Train a model to balance a pole on a cart using reinforcement learning. \n Description \n This example illustrates how to use TensorFlow.js to perform simple  reinforcement learning  (RL). Specifically, it showcases an implementation of the policy-gradient method in TensorFlow.js. This implementation is used to solve the classic  cart-pole control problem. \n Through  self play  the agent will learn to balance the pole for as many  steps  as it can. \n Instructions \n \n \n Choose a hidden layer size and click "Create Model". \n Select training parameters and then click "Train". \n Note that while the model is training it periodically saves a copy of itself to local browser storage, this mean you can refresh the page and continue training from the last save point. If at any point you want to start training from scratch, click "Delete stored Model". \n Once the model has finished training you can click "Test" to see how many \'steps\' the agent can balance the pole for. You can also click \'Stop\' to pause the training after the current iteration ends if you want to test the model sooner. \n During training and testing a small simulation of the agent behaviour will be rendered. \n \n Status \n Standing by. \n \n Initialize Model \n \n \n Hidden layer size(s) (e.g.: "256", "32,64"):   \n Create model \n \n Locally-stored model   \n Delete stored model \n \n Training Parameters \n \n Number of iterations:   \n Games per iteration:   \n Max. steps per game:   \n Reward discount rate:   \n Learning rate:   \n Render during training:     Uncheck me to speed up training. \n Train   Test \n \n \n Training Progress \n \n Iteration #:   \n Game #:   \n Training speed:   \n \n \n Simulation \n \n \n \n \n \n \n \n  Import tfjs-vis  \n \n \n \n \n \n \n', 'tags': '', 'url': 'RLearning.html'}, {'title': 'Featurescript', 'text': "https://www.onshape.com/features/custom-features \n Documentation:\xa0 https://cad.onshape.com/FsDoc/ \n Tutorial:\xa0 https://github.com/mbartlett21/featurescript-tutorials/tree/master/slot-tutorials/tutorial-1 \n Featurescript 論壇:\xa0 https://forum.onshape.com/categories/featurescript \n Examples:\xa0 https://github.com/dcowden/featurescript \n Beginner's Guide:\xa0 https://www.onshape.com/videos/the-beginners-guide-to-building-custom-cad-features-in-featurescript-010819 \n 參考 \n http://cadlab.mde.tw/post/onshape-featurescript-cheng-shi-yu-yan.html \n https://cadlab.mde.tw/post/onshape-featurescript-tutorial-dao-yin.html \n http://cadlab.mde.tw/post/search.html?q=featurescript", 'tags': '', 'url': 'Featurescript.html'}, {'title': 'Machine Learning', 'text': 'https://github.com/mdecourse/pyrobolearn \n https://github.com/mdecourse/visual-pushing-grasping \n https://github.com/jhu-lcsr/good_robot', 'tags': '', 'url': 'Machine Learning.html'}, {'title': 'Pytorch', 'text': 'https://www.kaggle.com/krishanudb/pytorch-tutorial-for-beginners \n https://www.kaggle.com/crilancelo/pytorch-in-kaggle \n https://www.kaggle.com/frtgnn/introduction-to-pytorch-a-very-gentle-start \n', 'tags': '', 'url': 'Pytorch.html'}, {'title': 'Keras', 'text': 'Deep Learning Projects Using TensorFlow 2 \n https://link.springer.com/book/10.1007/978-1-4842-5802-6 \xa0 \n \n', 'tags': '', 'url': 'Keras.html'}]};